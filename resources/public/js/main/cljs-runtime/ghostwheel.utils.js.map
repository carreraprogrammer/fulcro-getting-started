{"version":3,"sources":["ghostwheel/utils.cljc"],"mappings":"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","names":["ghostwheel.utils/ghostwheel-default-config","ghostwheel.utils/cljs-env?","env","cljs.core/boolean","*config-cache","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","read-config-file","reload-config","plain-config","cljs-compiler-config","cljs.env/*compiler*","or__4131__auto__","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__57579","vec__57580","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/name","var_args","G__57589","ghostwheel.utils/get-env-config","js/Error","ghostwheel.utils.get_env_config.cljs$core$IFn$_invoke$arity$1","cache?","cljs.core/not","now","cljs.core/identity","js/Date.now","cljs.core/reset!","G__57601","ghostwheel.utils/get-base-config","ghostwheel.utils.get_base_config.cljs$core$IFn$_invoke$arity$1","G__57613","ghostwheel.utils/clj->cljs","form","ghostwheel.utils.clj__GT_cljs.cljs$core$IFn$_invoke$arity$2","strip-core-ns","p1__57608#","ns-replacements","G__57619","replace-namespace","cljs.core/qualified-symbol?","nspace","cljs.core/namespace","cljs.core/contains?","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","clojure.walk/postwalk","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","ghostwheel.utils/gen-exception","msg"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ^:no-doc ghostwheel.utils\n  #?(:cljs (:require-macros ghostwheel.utils))\n  (:require [clojure.walk :as walk]\n            #?@(:clj  [[orchestra.spec.test :as ost]\n                       [clojure.edn :as edn]]\n                :cljs [[cljs.env :as cljs-env]\n                       [orchestra-cljs.spec.test :as ost]])))\n\n\n;; This isn't particularly pretty, but it's how we avoid\n;; having ClojureScript as a required dependency on Clojure\n#?(:clj (try\n          (do\n            (ns-unalias (find-ns 'ghostwheel.utils) 'cljs-env)\n            (require '[cljs.env :as cljs-env]))\n          (catch Exception _ (require '[ghostwheel.stubs.cljs-env :as cljs-env]))))\n\n\n(def ghostwheel-default-config\n  #:ghostwheel.core{;; Evaluation trace verbosity level. 0 disables all tracing code generation.\n                    :trace           0\n\n                    ;; #RRGGBB, #RGB, or keyword from the `ghostwheel-colors` map.\n                    :trace-color     :violet\n\n                    ;; When disabled no checks of any kind are\n                    ;; performed and no test code is generated.\n                    :check           false\n\n                    ;; Determines whether Ghostwheel should warn on missing fspecs\n                    ;; and plain (non-Ghostwheel) `defn` usage. When enabled on a\n                    ;; namespace or higher level, you can exclude individual `defn`s or\n                    ;; `declare`s by setting it to false in their respective metadata\n                    :check-coverage  false\n\n                    ;; Disable side effect detection\n                    :ignore-fx       false\n\n                    ;; Number of generative tests performed when quick-checking (on hot-reload)\n                    :num-tests       0\n\n                    ;; Number of generative tests performed when checking extensively (test suite)\n                    :num-tests-ext   100\n\n                    ;; Determines which of the above two options should take\n                    ;; precedence. Set to true in your test build configuration.\n                    :extensive-tests false\n\n                    ;; Ghostwheel generates standard `defn` function definitions\n                    ;; by default. If you require composability with other\n                    ;; `defn`-like macros, you can have Ghostwheel desugar to\n                    ;; them instead by setting the macro name as a string here.\n                    :defn-macro      nil\n\n                    ;; Spec-instrument functions on namespace reload.\n                    :instrument      false\n\n                    ;; Spec-instrument functions on namespace reload using\n                    ;; orchestra, which spec-checks the output in addition to\n                    ;; the input. Use either this or `::instrument`, not both.\n                    :outstrument     false\n\n                    ;; The following options can only be set in\n                    ;; the global Ghostwheel configuration layer\n\n                    ;; Nilable vector of qualified external namespaces\n                    ;; or functions (unquoted) to spec-instrument before\n                    ;; and unstrument after testing to catch incorrect\n                    ;; function calls at test time without the runtime\n                    ;; performance impact. Fspecs must be defined for\n                    ;; the relevant functions in a `require`d namespace\n                    ;; using either `s/fdef` or Ghostwheel's `>fdef`.\n                    :extrument       nil\n\n                    ;; Nilable map of Expound configuration options.\n                    ;; If not nil, the spec printer will be set to\n                    ;; expound's with the given configuration options.\n                    :expound         {:show-valid-values? true\n                                      :print-specs?       true}\n\n                    ;; Output channel for tracing and check\n                    ;; reports. Only `:repl` and `:js-console`\n                    ;; are supported at the moment. The option is\n                    ;; ignored on Clojure where only `:repl` is used.\n                    :report-output   :js-console})\n\n\n(defn cljs-env? [env] (boolean (:ns env)))\n\n\n(let [*config-cache\n      (atom {::timestamp 0\n             ::value     nil})\n\n      read-config-file\n      (fn []\n        #?(:clj  (try\n                   (edn/read-string (slurp \"ghostwheel.edn\"))\n                   (catch Exception _ nil))\n           :cljs nil))\n\n      reload-config\n      (fn []\n        ;#?(:clj (.println System/err \"Reloaded ghostwheel config.\")) ; DEBUG\n        (let [plain-config                            ;; TODO validation\n              (let [cljs-compiler-config\n                    (when cljs-env/*compiler*\n                      (or (get-in @cljs-env/*compiler* [:options :external-config :ghostwheel])\n                          ;; Deprecated.\n                          (get-in @cljs-env/*compiler* [:options :ghostwheel])))]\n                (when (or #?(:clj (= (System/getProperty \"ghostwheel.enabled\") \"true\"))\n                          cljs-compiler-config)\n                  (merge {}\n                         (read-config-file)\n                         cljs-compiler-config)))]\n          (when plain-config\n            (into {} (map (fn [[k v]]\n                            [(keyword \"ghostwheel.core\" (name k))\n                             v])\n                          plain-config)))))]\n\n  (defn get-env-config\n    ([]\n     (get-env-config true))\n    ([cache?]\n     (if (or (not cache?)\n             #?(:clj (= (System/getProperty \"ghostwheel.cache\") \"false\")))\n       (reload-config)\n       (let [now (identity #?(:clj (System/currentTimeMillis) :cljs (js/Date.now)))]\n         (if (< (- now (::timestamp @*config-cache))\n                2000)\n           (::value @*config-cache)\n           (::value (reset! *config-cache {::timestamp now\n                                           ::value     (reload-config)}))))))))\n\n\n(defn get-base-config\n  ([]\n   (get-base-config true))\n  ([cache?]\n   (merge ghostwheel-default-config (get-env-config cache?))))\n\n\n(defn clj->cljs\n  ([form]\n   (clj->cljs form true))\n  ([form strip-core-ns]\n   (let [ns-replacements   (cond-> {\"clojure.core\"            \"cljs.core\"\n                                    \"clojure.test\"            \"cljs.test\"\n                                    \"clojure.spec.alpha\"      \"cljs.spec.alpha\"\n                                    \"clojure.spec.test.alpha\" \"cljs.spec.test.alpha\"\n                                    \"orchestra.spec.test\"     \"orchestra-cljs.spec.test\"\n                                    \"clojure.spec.gen.alpha\"  \"cljs.spec.gen.alpha\"}\n                                   strip-core-ns (merge {\"clojure.core\" nil\n                                                         \"cljs.core\"    nil}))\n         replace-namespace #(if-not (qualified-symbol? %)\n                              %\n                              (let [nspace (namespace %)]\n                                (if (contains? ns-replacements nspace)\n                                  (symbol (get ns-replacements nspace) (name %))\n                                  %)))]\n     (walk/postwalk replace-namespace form))))\n\n\n(defn gen-exception [env msg]\n  `(throw (~(if (cljs-env? env) 'js/Error. 'Exception.) ~msg)))\n"]}