{"version":3,"sources":["app/client.cljs"],"mappings":"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","names":["options__45485__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__49478","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/app","js/app.client","js/app.client.Car","props__45486__auto__","this__45487__auto__","temp__5802__auto__","init-state__45488__auto__","obj49481","G__49482","G__49483","goog.object/get","obj49485","com.fulcrologic.fulcro.components/configure-component!","app.client/Car","this","id","model","props","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","app.client/ui-car","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","_","map__49486","js/app.client.Person","obj49489","G__49490","G__49491","obj49493","app.client/Person","name","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","app.client/ui-person","map__49494","js/app.client.Sample","obj49497","G__49498","G__49499","obj49501","app.client/Sample","sample","js/app.client.APP","app.client/APP","com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$0","app.client/init","com.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns app.client\r\n  (:require\r\n    [com.fulcrologic.fulcro.application :as app]\r\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\r\n    [com.fulcrologic.fulcro.dom :as dom]\r\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\r\n    [com.fulcrologic.fulcro.algorithms.data-targeting :as targeting]))\r\n\r\n(defsc Car [this {:car/keys [id model] :as props}]\r\n  {}\r\n    (dom/div\r\n      \"Model: \" model))                         ;A component Car is looking into a car map, and taking the asign variables to the keys :car/id and car/model\r\n\r\n(def ui-car (comp/factory Car {:keyfn :car/id}))\r\n\r\n(defsc Person [this {:person/keys [id name ] :as props}]\r\n  {:query [:person/id :person/name]                         ; The :query parameter is used to specify the data that the component needs from the state in order to render properly\r\n   :ident :person/id}                                       ; This is a unique identifier for the component\r\n  (dom/div\r\n    (dom/div\r\n    \"Name: \" name)\r\n    #_#_(dom/h3 \"Cars\")\r\n    (dom/ul\r\n      (map ui-car cars))))                               ;A component Person is called where the id and names are destructured from the state\r\n\r\n(def ui-person (comp/factory Person {:keyfn :person/id}))   ;An instance is created from the Person component that uses as unique identifier :person/id\r\n(defsc Sample [this {:keys [sample]}]\r\n   {}\r\n  (dom/div\r\n    (ui-person sample)))                                    ;ui-person acts as a factory function that takes a single argument and returns and instance of the person component with the properties in sample\r\n\r\n(defonce APP (app/fulcro-app))\r\n\r\n(defn ^:export init []\r\n  (app/mount! APP Sample \"app\"))\r\n\r\n(comment\r\n  (reset! (::app/state-atom APP) {:sample {:person/id   1\r\n                                           :person/name \"Daniel\"\r\n                                           :person/cars [{\r\n                                                          :car/id    22\r\n                                                          :car/model \"Escort\"\r\n                                                          }]}\r\n                                  })\r\n  (app/schedule-render! APP))"]}