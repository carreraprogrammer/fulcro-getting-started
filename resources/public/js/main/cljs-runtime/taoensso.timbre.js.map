{"version":3,"sources":["taoensso/timbre.cljs"],"mappings":"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","names":["cljs.core/vector?","taoensso.encore/encore-version","taoensso.encore/assert-min-encore-version","var_args","G__51643","taoensso.timbre/default-output-fn","js/Error","data","taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2","opts","map__51648","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__51649","no-stacktrace?","stacktrace-fonts","level","?err","msg_","?ns-str","?file","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","or__4131__auto__","cljs.core/force","temp__5804__auto__","err","taoensso.timbre/stacktrace","taoensso.timbre/println-appender","taoensso.timbre.appenders.core/println-appender","taoensso.timbre/console-appender","taoensso.timbre.appenders.core/console-appender","taoensso.timbre/example-config","G__51659","js/taoensso","js/taoensso.timbre","js/taoensso.timbre.*config*","taoensso.timbre/*config*","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","taoensso.timbre/swap-config!","seq51660","G__51661","cljs.core/first","cljs.core/next","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","taoensso.timbre/set-config!","m","_old","taoensso.timbre/merge-config!","old","taoensso.encore.nested_merge.cljs$core$IFn$_invoke$arity$variadic","taoensso.timbre/set-level!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","taoensso.timbre/-levels-vec","taoensso.timbre/-levels-set","cljs.core/set","taoensso.timbre/-levels-map","cljs.core/zipmap","cljs.core.range.cljs$core$IFn$_invoke$arity$0","taoensso.timbre/valid-level?","x","taoensso.timbre/valid-level","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/level>=","y","G__51711","G__51713","taoensso.timbre/-compile-ns-filter","taoensso.encore/memoize_","taoensso.encore/compile-ns-filter","taoensso.timbre/ns-filter","whitelist","blacklist","?ns","fexpr__51716","G__51720","taoensso.timbre/may-log?","taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3","?config","config","min-level","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/boolean","G__51725","G__51726","G__51727","taoensso.timbre/str-join","xs","taoensso.encore.str_join.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","taoensso.encore/nil->str","cljs.core/record?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/taoensso.timbre.get-rate-limiter","taoensso.timbre/get-rate-limiter","appender-id","specs","taoensso.encore/limiter","taoensso.timbre/*context*","taoensso.timbre/vrest","v","cljs.core/count","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/parse-vargs","msg-type","vargs","vec__51735","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","auto-error?","G__51738","G__51739","taoensso.encore/kw-identical?","fmt-msg?","G__51740","G__51741","v0","and__4120__auto__","taoensso.encore/error?","?meta","?msg-fmt","vec__51742","cljs.core/map?","cljs.core/meta","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","vec__51747","G__51751","taoensso.timbre/-log!","vargs_","?base-data","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","callsite-id","cljs.core/deref","vec__51754","instant","taoensso.encore/now-dt","context","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","fexpr__51757","cljs.core/Delay","?data","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","mf","result","cljs.core/reduced","map__51758","taoensso.encore.assoc_nx.cljs$core$IFn$_invoke$arity$variadic","G__51761","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","taoensso.encore/format*","cljs.core/hash","output-fn1","cljs.core/reduce-kv","_","id","appender","G__51763","G__51764","G__51765","rate-limit-specs","rate-limit-okay?","cljs.core/empty?","rl-fn","cljs.core/not","G__51767","map__51768","async?","apfn","output-fn","G__51775","G__51776","output_","temp__5802__auto__","mfn","G__51781","taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/console-?appender","taoensso.timbre/ordered-levels","taoensso.timbre/log?","taoensso.timbre/logging-enabled?","compile-time-ns","taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/str-println","seq51782","self__4718__auto__","cljs.core/seq"],"sourcesContent":["(ns taoensso.timbre\n  \"Simple, flexible logging for Clojure/Script. No XML.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n       \n           \n                               \n                                    \n                                                      \n                                                       \n\n        \n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc :refer [] :refer-macros [have have?]]\n   [taoensso.timbre.appenders.core :as core-appenders])\n\n        \n  (:require-macros\n   [taoensso.timbre :as timbre-macros :refer []]))\n\n(if (vector? taoensso.encore/encore-version)\n  (enc/assert-min-encore-version [2 87 0])\n  (enc/assert-min-encore-version  2.87))\n\n;;;; Config\n\n     \n                           \n                               \n                                           \n                                                    \n                                                                                 \n\n(declare stacktrace)\n(defn default-output-fn\n  \"Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.\"\n  ([     data] (default-output-fn nil data))\n  ([opts data] ; For partials\n   (let [{:keys [no-stacktrace? stacktrace-fonts]} opts\n         {:keys [level ?err #_vargs msg_ ?ns-str ?file hostname_\n                 timestamp_ ?line]} data]\n     (str\n                                         \n                                         \n       (str/upper-case (name level))  \" \"\n       \"[\" (or ?ns-str ?file \"?\") \":\" (or ?line \"?\") \"] - \"\n       (force msg_)\n       (when-not no-stacktrace?\n         (when-let [err ?err]\n           (str \"\\n\" (stacktrace err opts))))))))\n\n;;; Alias core appenders here for user convenience\n(declare default-err default-out)\n                                                             \n                                                          \n       (def println-appender core-appenders/println-appender)\n       (def console-appender core-appenders/console-appender)\n\n(def example-config\n  \"Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _} (clj only)\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string (clj only)\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`.\"\n\n  {:level :debug  ; e/o #{:trace :debug :info :warn :error :fatal :report}\n\n   ;; TODO Consider switching to `:ns-pattern` to match Tufte?\n   ;; Control log filtering by namespaces/patterns. Useful for turning off\n   ;; logging in noisy libraries, etc.:\n   :ns-whitelist  [] #_[\"my-app.foo-ns\"]\n   :ns-blacklist  [] #_[\"taoensso.*\"]\n\n   :middleware [] ; (fns [data]) -> ?data, applied left->right\n\n                        \n                                ; {:pattern _ :locale _ :timezone _}\n\n   :output-fn default-output-fn ; (fn [data]) -> string\n\n   :appenders\n        \n                                               \n                                                         \n     \n\n         \n   {;; :println (println-appender {})\n    :console (console-appender {})}})\n\n(comment\n  (set-config! example-config)\n  (infof \"Hello %s\" \"world :-)\"))\n\n(enc/defonce ^:dynamic *config* \"See `example-config` for info.\" example-config)\n                                                                                  \n                                            \n                                                                   \n\n(defn swap-config! [f & args]\n         (set!                   *config* (apply f *config* args))\n                                                 )\n\n(defn   set-config! [m] (swap-config! (fn [_old] m)))\n(defn merge-config! [m] (swap-config! (fn [old] (enc/nested-merge old m))))\n\n(defn     set-level! [level] (swap-config! (fn [m] (assoc m :level level))))\n                                   \n                                                              \n\n(comment (set-level! :info) *config*)\n\n;;;; Levels\n;; Note that for historical reasons we don't make a distinction\n;; between form \"level\"s and config \"min-level\"s.\n\n(def ^:const -levels-vec [:trace :debug :info :warn :error :fatal :report])\n(def ^:const -levels-set (set    -levels-vec))\n(def ^:const -levels-map (zipmap -levels-vec (next (range))))\n\n(defn valid-level? [x] (if (-levels-set x) true false))\n(defn valid-level  [x]\n  (or (-levels-set x)\n      (throw (ex-info \"Invalid Timbre logging level\" {:given x}))))\n\n(defn level>= [x y]\n  (>= ^long (-levels-map (valid-level x))\n      ^long (-levels-map (valid-level y))))\n\n(comment (qb 1e6 (level>= :info :debug))) ; 81.25\n\n;;;; Namespace filtering\n\n(def ^:private -compile-ns-filter (enc/memoize_ enc/compile-ns-filter))\n(def ^:private          ns-filter\n  \"Returns true iff given ns passes white/black lists.\"\n  (enc/memoize_\n    (fn [whitelist blacklist ?ns]\n      ((-compile-ns-filter whitelist blacklist) ?ns))))\n\n(comment\n  (qb 1e6 (ns-filter [\"foo.*\"] [\"foo.baz\"] \"foo.bar\")) ; 238.33\n  (ns-filter nil nil \"\")\n  (ns-filter nil nil nil))\n\n;;;; Combo filtering\n\n     \n                         \n                                        \n                                             \n           \n\n     \n                                 \n                                                        \n                                                              \n                               \n                                                                    \n\n                               \n                                                           \n                            \n\n     \n                                     \n                                                             \n       \n                                 \n                                                                                \n\n                                      \n\n                         \n                                                                                      \n                                                                                       \n\n                                                   \n                                                                                 \n\n                                                   \n                                                                                 \n\n                                                 \n\n                                           \n                                      \n      \n        \n                      \n                                 \n                                                                        \n                                                \n\n                          \n                                                                     \n                                                \n\n(defn                       ^boolean may-log?\n  \"Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config\"\n  ([level                ] (may-log? level nil     nil))\n  ([level ?ns-str        ] (may-log? level ?ns-str nil))\n  ([level ?ns-str ?config]\n   (let [config    (or  ?config *config*)\n         min-level (get  config :level :report)]\n     (and\n       (level>= level min-level)\n       (boolean ; Resolves #206 (issue with slf4j-timbre)\n         (ns-filter\n           (get config :ns-whitelist)\n           (get config :ns-blacklist)\n           ?ns-str))\n       true))))\n\n(comment (qb 1e5 (may-log? :info))) ; 34.13\n\n;;;; Utils\n\n(declare get-hostname)\n\n(enc/compile-if (do enc/str-join true) ; Encore v2.29.1+ with transducers\n  (defn- str-join [xs]\n    (enc/str-join \" \"\n      (map\n        (fn [x]\n          (let [x (enc/nil->str x)] ; Undefined, nil -> \"nil\"\n            (cond\n              (record?          x) (pr-str x)\n              ;; (enc/lazy-seq? x) (pr-str x) ; Dubious?\n              :else x))))\n      xs))\n  (defn- str-join [xs] (str/join \" \"                 (filter identity xs))))\n\n(comment\n  (defrecord MyRec [x])\n  (str-join [\"foo\" (MyRec. \"foo\")]))\n\n     \n                                \n                                                                      \n\n(comment (get-agent :my-appender))\n\n(defonce ^:private get-rate-limiter\n  (enc/memoize_ (fn [appender-id specs] (enc/limiter specs))))\n\n(comment (def rf (get-rate-limiter :my-appender [[10 5000]])))\n\n;;;; Internal logging core\n\n(def ^:dynamic *context* \"General-purpose dynamic logging context\" nil)\n                       \n                                                                     \n                                                              \n\n               \n                                                                        \n                             \n\n                                                          \n\n(defn- vrest [v] (if (> (count v) 1) (subvec v 1) []))\n(defn- parse-vargs\n  \"vargs -> [?err ?meta ?msg-fmt api-vargs]\"\n  [?err msg-type vargs]\n  (let [auto-error? (enc/kw-identical? ?err :auto)\n        fmt-msg?    (enc/kw-identical? msg-type :f)\n        [v0] vargs]\n\n    (if (and auto-error? (enc/error? v0))\n      (let [?err     v0\n            ?meta    nil\n            vargs    (vrest vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs])\n\n      (let [?meta    (if (and (map? v0) (:meta (meta v0))) v0 nil)\n            ?err     (or (:err ?meta) (if auto-error? nil ?err))\n            ?meta    (dissoc ?meta :err)\n            vargs    (if ?meta (vrest vargs) vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs]))))\n\n(comment\n  (let [ex (Exception. \"ex\")]\n    (qb 10000\n      (parse-vargs :auto :f [\"fmt\" :a :b :c])\n      (parse-vargs :auto :p [ex    :a :b :c])\n      (parse-vargs :auto :p [^:meta {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [       {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [ex])\n      (parse-vargs :auto :p [^:meta {:err ex}   :a :b :c])))\n  ;; [2.79 2.51 6.13 1.65 1.94 6.2]\n  (infof                                 \"Hi %s\" \"steve\")\n  (infof ^:meta {:hash :bar}             \"Hi %s\" \"steve\")\n  (infof ^:meta {:err (Exception. \"ex\")} \"Hi %s\" \"steve\"))\n\n(defn -log! \"Core low-level log fn. Implementation detail!\"\n\n  ;; TODO Temp workaround for\n  ;; https://github.com/fzakaria/slf4j-timbre/issues/20 and similar AOT tools\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data]\n   ;; (throw (ex-info \"Invalid internal Timbre call. Please try run `lein clean` to clear out-of-date build artifacts.\" {}))\n   (-log! config level ?ns-str ?file ?line msg-type ?err vargs_\n     ?base-data nil))\n\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_\n    ?base-data callsite-id]\n\n  (when (may-log? level ?ns-str config)\n    (let [instant (enc/now-dt)\n          context *context*\n          vargs   @vargs_\n\n          [?err ?meta ?msg-fmt vargs]\n          (parse-vargs ?err msg-type vargs)\n\n          data ; Pre-middleware\n          (conj\n            (or ?base-data {})\n            {:instant instant\n             :level   level\n             :context context\n             :config  config ; Entire config!\n             :?ns-str ?ns-str\n             :?file   ?file\n             :?line   ?line\n                                                          \n             :error-level? (#{:error :fatal} level)\n             :?err     ?err\n             :?err_    (delay ?err) ; Deprecated\n             :?meta    ?meta        ; Undocumented\n             :?msg-fmt ?msg-fmt     ; Undocumented\n             :vargs    vargs})\n\n          ?data ; Post middleware\n          (reduce ; Apply middleware: data->?data\n            (fn [acc mf]\n              (let [result (mf acc)]\n                (if (nil? result)\n                  (reduced nil)\n                  result)))\n            data\n            (:middleware config))]\n\n      (when-let [data ?data] ; Not filtered by middleware\n        (let [{:keys [vargs]} data\n              data (assoc data :vargs_ (delay vargs)) ; Deprecated\n              data\n              (enc/assoc-nx data\n                :msg_\n                (delay\n                  (case msg-type\n                    nil \"\"\n                    :p  (str-join vargs)\n                    :f  #_(enc/format* (have string? ?msg-fmt) vargs)\n                    (do\n                      (when-not (string? ?msg-fmt)\n                        (throw\n                          (ex-info \"Timbre format-style logging call without a format pattern (string)\"\n                            #_data\n                            {:level    level\n                             :location (str (or ?ns-str ?file \"?\") \":\"\n                                            (or ?line         \"?\"))})))\n\n                      (enc/format* ?msg-fmt vargs))))\n\n                ;; Uniquely identifies a particular logging call for\n                ;; rate limiting, etc.\n                :hash_\n                (delay\n                  (hash\n                    ;; Nb excl. instant\n                    [callsite-id      ; Only useful for direct macro calls\n                     ?msg-fmt\n                     (get ?meta :hash ; Explicit hash provided\n                       vargs)])))\n\n              ;; Optimization: try maximize output+timestamp sharing\n              ;; between appenders\n              output-fn1 (enc/memoize_ (get config :output-fn default-output-fn))\n                                                                                                    \n                                   ; (fn [timestamp-opts]) -> Shared delay\n                   \n                           \n                         \n                       \n                                                               \n                            \n                                                 \n                                                                       \n                                         ]\n\n          (reduce-kv\n           (fn [_ id appender]\n             (when (and (:enabled? appender)\n                        (level>= level (or (:min-level appender) :trace)))\n\n               ;; Appender ns filter stacks with main config's ns filter:\n               (when (ns-filter (:ns-whitelist appender)\n                                (:ns-blacklist appender)\n                                ?ns-str)\n\n                 (let [rate-limit-specs (:rate-limit appender)\n                       rate-limit-okay?\n                       (or\n                        (empty? rate-limit-specs)\n                        (let [rl-fn (get-rate-limiter id rate-limit-specs)]\n                          (not (rl-fn (force (:hash_ data))))))]\n\n                   (when rate-limit-okay?\n                     (let [{:keys [async?] apfn :fn} appender\n\n                           output-fn\n                           (let [f (:output-fn appender)]\n                             (if (or (nil? f) (enc/kw-identical? f :inherit))\n                               output-fn1\n                               f))\n\n                                           \n                                \n                                                                 \n                                                                                   \n                                                                     \n                                                                             \n\n                           output_\n                           (delay\n                            (output-fn\n                                                                       \n                                    data))\n\n                           data\n                           (conj data\n                             {:appender-id id\n                              :appender    appender\n                              :output-fn   output-fn\n                              :output_     output_\n                                                                })\n\n                           ?data ; Final data prep before going to appender\n                           (if-let [mfn (:middleware-fn appender)]\n                             (mfn data) ; Deprecated, undocumented\n                             data)]\n\n                       (when-let [data ?data] ; Not filtered by middleware\n\n                         ;; NB Unless `async?`, we currently allow appenders\n                         ;; to throw since it's not particularly obvious\n                         ;; how/where we should report problems. Throwing\n                         ;; early seems preferable to just silently dropping\n                         ;; errors. In effect, we currently require appenders\n                         ;;  to take responsibility over appropriate trapping.\n\n                                (apfn data)\n                              \n                                   \n                                                                         \n                                       )))))))\n           nil\n           (:appenders config))))))\n  nil))\n\n(comment\n  (-log! *config* :info nil nil nil :p :auto\n    (delay [(do (println \"hi\") :x) :y]) nil \"callsite-id\"))\n\n                                                      \n\n                                              \n                                                     \n\n                                                     \n                                                \n                                                                             \n\n                                                            \n                                         \n                                \n                                                                   \n                                                        \n                                                \n                                     \n                                                       \n                                                    \n                                                            \n                                 \n                                             \n                                               \n\n                                                            \n\n                                                                            \n                                                                             \n                                     \n                       \n                                                                     \n                                                \n\n                                                                     \n                                                         \n\n(comment\n  (log! :info :p [\"foo\"])\n  (macroexpand '(log! :info :p [\"foo\"]))\n  (macroexpand '(log! :info :p [\"foo\"] {:?line 42})))\n\n;;;; Benchmarking\n\n(comment\n  (set-level! :debug)\n  (may-log? :trace)\n  (with-level :trace (log? :trace))\n  (qb 10000\n    (may-log? :trace)\n    (may-log? :trace \"foo\")\n    (tracef \"foo\")\n    (when false \"foo\"))\n  ;; [1.38 1.42 2.08 0.26]\n\n                                                \n                                                                            \n\n  (with-sole-appender {:enabled? true :fn (fn [data] nil)}\n    (qb 10000 (info \"foo\"))) ; ~74.58 ; Time to delays ready\n\n  (with-sole-appender {:enabled? true :fn (fn [data] (force (:output_ data)))}\n    (qb 10000 (info \"foo\"))) ; ~136.68 ; Time to output ready\n  )\n\n;;;; Main public API-level stuff\n;; TODO Have a bunch of cruft here trying to work around CLJ-865 to some extent\n\n;;; Log using print-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n;;; Log using format-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n(comment\n  (infof \"hello %s\" \"world\")\n  (infof (Exception.) \"hello %s\" \"world\")\n  (infof (Exception.)))\n\n                                    \n                               \n        \n                             \n                                               \n\n                                                \n                               \n        \n                             \n                                            \n                    \n\n                                                                              \n\n                                                                                           \n                                                                                           \n                                                                                           \n\n     \n                                     \n                                                    \n               \n               \n                   \n                                        \n                                                                \n                                   \n\n                                              \n                                            \n                                                                                  \n\n(comment\n  (log-errors             (/ 0))\n  (log-and-rethrow-errors (/ 0))\n  (logged-future          (/ 0))\n  (handle-uncaught-jvm-exceptions!))\n\n                                             \n                                  \n                         \n                             \n                                                            \n                                                                           \n\n                                 \n                 \n\n             \n                                                                             \n                                                                       \n                                                                                \n                                                                                \n                                                                                \n                                                                                 \n\n                                    \n(comment ((fn foo [x y] (get-env)) 5 10))\n\n     \n                  \n                 \n                                       \n                                                                        \n                                                                         \n                                            \n    \n                                       \n                                                                        \n                                                                         \n                                           \n\n                                          \n                                                    \n                                             \n\n;;;; Misc public utils\n\n     \n                            \n                                        \n                                                                   \n                                                                   \n                                                                   \n                                    \n                                                                 \n\n                                                                \n                                                                \n                                    \n                                                           \n\n     \n                    \n                                                               \n                                                           \n                                                      \n\n                                                                    \n                                                                             \n                                                                           \n                                                           \n                      \n                                                            \n         \n\n                                                     \n                                  \n                                                                     \n\n(comment (get-hostname))\n\n     \n                                       \n                                                          \n           \n\n(defn stacktrace\n  ([err     ] (stacktrace err nil))\n  ([err opts]\n          (str err) ; TODO Alternatives?\n        \n                                                       \n                                                  \n                                  \n                                \n                 \n                         \n                                     \n\n                                     \n                                        \n                                              \n                                               ))\n\n(comment (stacktrace (Exception. \"Boo\") {:stacktrace-fonts {}}))\n\n                                                     \n                      \n                                                                 \n                                               \n\n;;;; Deprecated\n\n(enc/deprecated\n         (def console-?appender core-appenders/console-appender)\n  (def ordered-levels -levels-vec)\n  (def log? may-log?)\n  (defn logging-enabled? [level compile-time-ns] (may-log? level (str compile-time-ns)))\n  (defn str-println      [& xs] (str-join xs))\n                                                                              \n                                                                              \n                                        \n                   \n                                           \n                                                  \n                                                          \n                                                                      )\n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/timbre.cljx\n"]}