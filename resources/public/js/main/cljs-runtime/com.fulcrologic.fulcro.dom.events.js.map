{"version":3,"sources":["com/fulcrologic/fulcro/dom/events.cljc"],"mappings":";;AAGA;;;AAAA,AAAMA,AAEHC;AAFH,AAEiB,AAAsBA;;AAEvC;;;AAAA,AAAMC,AAEHD;AAFH,AAEiB,AAAqBA;;AAEtC;;;AAAA,AAAME,AAEHF;AAFH,AAGW,AAAA,AAAIA;;AAEf;;;AAAA,AAAMG,AAGHC,AAAKJ;AAHR,AAGa,AAACK,AAAED,AAAK,AAAWJ;;AAEhC;;;AAAA,AAAMM,AAAuGN;AAA7G,AAAkH,AAAA,AAACG,AAAWH;;AAC9H;;;AAAA,AAAMO,AAAwGP;AAA9G,AAAmH,AAAA,AAACG,AAAWH;;AAC/H;;;AAAA,AAAMQ,AAAwGR;AAA9G,AAAmH,AAAA,AAACG,AAAWH;;AAC/H;;;AAAA,AAAMS,AAAyGT;AAA/G,AAAoH,AAAA,AAACG,AAAWH;;AAChI;;;AAAA,AAAMU,AAAsGV;AAA5G,AAAiH,AAAA,AAACG,AAAWH;;AAC7H;;;AAAA,AAAMW,AAAwGX;AAA9G,AAAmH,AAAA,AAACG,AAAWH;;AAC/H;;;AAAA,AAAMY,AAAqGZ;AAA3G,AAAgH,AAAA,AAACG,AAAWH;;AAC5H;;;AAAA,AAAMa,AAAuGb;AAA7G,AAAkH,AAAA,AAACG,AAAWH;;AAC9H;;;AAAA,AAAMc,AAAmGd;AAAzG,AAA8G,AAAA,AAACG,AAAWH;;AAC1H;;;AAAA,AAAMe,AAAoGf;AAA1G,AAA+G,AAAA,AAACG,AAAWH;;AAC3H;;;AAAA,AAAMgB,AAAoGhB;AAA1G,AAA+G,AAAA,AAACG,AAAWH;;AAC3H;;;AAAA,AAAMiB,AAAiGjB;AAAvG,AAA4G,AAAA,AAACG,AAAUH;;AACvH;;;AAAA,AAAMkB,AAAiGlB;AAAvG,AAA4G,AAAA,AAACG,AAAWH;;AACxH;;;AAAA,AAAMmB,AAAkGnB;AAAxG,AAA6G,AAAA,AAACG,AAAWH;;AACzH;;;AAAA,AAAMoB,AAAiGpB;AAAvG,AAA4G,AAAA,AAACG,AAAWH;;AACxH;;;AAAA,AAAMqB,AAAkGrB;AAAxG,AAA6G,AAAA,AAACG,AAAWH;;AACzH;;;AAAA,AAAMsB,AAAmGtB;AAAzG,AAA8G,AAAA,AAACG,AAAWH;;AAC1H;;;AAAA,AAAMuB,AAAgGvB;AAAtG,AAA2G,AAAA,AAACG,AAAYH;;AACxH;;;AAAA,AAAMwB,AAAgGxB;AAAtG,AAA2G,AAAA,AAACG,AAAYH;;AACxH;;;AAAA,AAAMyB,AAAgGzB;AAAtG,AAA2G,AAAA,AAACG,AAAYH;;AACxH;;;AAAA,AAAM0B,AAAgG1B;AAAtG,AAA2G,AAAA,AAACG,AAAYH;;AACxH;;;AAAA,AAAM2B,AAAgG3B;AAAtG,AAA2G,AAAA,AAACG,AAAYH;;AACxH;;;AAAA,AAAM4B,AAAgG5B;AAAtG,AAA2G,AAAA,AAACG,AAAYH;;AACxH;;;AAAA,AAAM6B,AAAgG7B;AAAtG,AAA2G,AAAA,AAACG,AAAYH;;AACxH;;;AAAA,AAAM8B,AAAgG9B;AAAtG,AAA2G,AAAA,AAACG,AAAYH;;AACxH;;;AAAA,AAAM+B,AAAgG/B;AAAtG,AAA2G,AAAA,AAACG,AAAYH;;AACxH;;;AAAA,AAAMgC,AAAiGhC;AAAvG,AAA4G,AAAA,AAACG,AAAYH;;AACzH;;;AAAA,AAAMiC,AAAiGjC;AAAvG,AAA4G,AAAA,AAACG,AAAYH;;AACzH;;;AAAA,AAAMkC,AAAiGlC;AAAvG,AAA4G,AAAA,AAACG,AAAYH","names":["com.fulcrologic.fulcro.dom.events/stop-propagation!","evt","com.fulcrologic.fulcro.dom.events/prevent-default!","com.fulcrologic.fulcro.dom.events/target-value","com.fulcrologic.fulcro.dom.events/is-key?","code","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.dom.events/enter-key?","com.fulcrologic.fulcro.dom.events/escape-key?","com.fulcrologic.fulcro.dom.events/left-arrow?","com.fulcrologic.fulcro.dom.events/right-arrow?","com.fulcrologic.fulcro.dom.events/up-arrow?","com.fulcrologic.fulcro.dom.events/down-arrow?","com.fulcrologic.fulcro.dom.events/page-up?","com.fulcrologic.fulcro.dom.events/page-down?","com.fulcrologic.fulcro.dom.events/enter?","com.fulcrologic.fulcro.dom.events/escape?","com.fulcrologic.fulcro.dom.events/delete?","com.fulcrologic.fulcro.dom.events/tab?","com.fulcrologic.fulcro.dom.events/end?","com.fulcrologic.fulcro.dom.events/home?","com.fulcrologic.fulcro.dom.events/alt?","com.fulcrologic.fulcro.dom.events/ctrl?","com.fulcrologic.fulcro.dom.events/shift?","com.fulcrologic.fulcro.dom.events/F1?","com.fulcrologic.fulcro.dom.events/F2?","com.fulcrologic.fulcro.dom.events/F3?","com.fulcrologic.fulcro.dom.events/F4?","com.fulcrologic.fulcro.dom.events/F5?","com.fulcrologic.fulcro.dom.events/F6?","com.fulcrologic.fulcro.dom.events/F7?","com.fulcrologic.fulcro.dom.events/F8?","com.fulcrologic.fulcro.dom.events/F9?","com.fulcrologic.fulcro.dom.events/F10?","com.fulcrologic.fulcro.dom.events/F11?","com.fulcrologic.fulcro.dom.events/F12?"],"sourcesContent":["(ns com.fulcrologic.fulcro.dom.events\n  \"Utility functions for working with low-level synthetic js events on the DOM\")\n\n(defn stop-propagation!\n  \"Calls .stopPropagation on the given event. Safe to use in CLJC files.\"\n  [evt] #?(:cljs (.stopPropagation ^js evt)))\n\n(defn prevent-default!\n  \"Calls .preventDefault on the given event. Safe to use in CLJC files.\"\n  [evt] #?(:cljs (.preventDefault ^js evt)))\n\n(defn target-value\n  \"Returns the event #js evt.target.value. Safe to use in CLJC.\"\n  [evt]\n  #?(:cljs (.. evt -target -value)))\n\n(defn is-key?\n  \"Is the given key code on the given event?\"\n  #?(:cljs {:tag boolean})\n  [code evt] (= code (.-keyCode evt)))\n\n(defn enter-key? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 13 evt))\n(defn escape-key? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 27 evt))\n(defn left-arrow? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 37 evt))\n(defn right-arrow? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 39 evt))\n(defn up-arrow? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 38 evt))\n(defn down-arrow? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 40 evt))\n(defn page-up? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 33 evt))\n(defn page-down? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 34 evt))\n(defn enter? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 13 evt))\n(defn escape? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 27 evt))\n(defn delete? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 46 evt))\n(defn tab? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 9 evt))\n(defn end? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 35 evt))\n(defn home? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 36 evt))\n(defn alt? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 18 evt))\n(defn ctrl? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 17 evt))\n(defn shift? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 16 evt))\n(defn F1? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 112 evt))\n(defn F2? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 113 evt))\n(defn F3? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 114 evt))\n(defn F4? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 115 evt))\n(defn F5? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 116 evt))\n(defn F6? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 117 evt))\n(defn F7? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 118 evt))\n(defn F8? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 119 evt))\n(defn F9? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 120 evt))\n(defn F10? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 121 evt))\n(defn F11? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 122 evt))\n(defn F12? \"Returns true if the event has the keyCode of the function name.\" #?(:cljs {:tag boolean}) [evt] (is-key? 123 evt))\n"]}