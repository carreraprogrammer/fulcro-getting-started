{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/lookup.cljc"],"mappings":";;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAAA,AAAMM,AA2B6DG;AA3BnE,AAAA,AAAAR,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AA2B8DO;AA3B9D,AAAAH,AAAAJ,AAAA,AA2B8CM;AA3B9C,AA4BE,AAAAG,AAAc,AAAA,AAAA,AAAM,AAAI,AAASD,AAAG,AAAAG,AAAUH,AAAG,AAAAI,AAASJ,AAC1C,AAAA,AAACK,AAA2C,AAACC,AAAKN;AADlE,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAWC;AAAX,AAEE,AAAA,AAAA,AAAA,AAACK,AAAOR,AAAoDG;;AAF9D","names":["p__51796","map__51797","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","algorithms","app","k","temp__5804__auto__","nm","cljs.core/Keyword","cljs.core/Symbol","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.lookup\n  \"Namespace with support for finding plug-in algorithms on the app. Avoids circular references\n  within the library itself.\"\n  (:require\n    [taoensso.timbre :as log]))\n\n(defn app-algorithm\n  \"Get the current value of a particular Fulcro plugin algorithm.  These are set by default and can be overridden\n  when you create your fulcro app.\n\n  `app` - The application\n  `k` - the algorithm to obtain. This can be a plain keyword or a symbol of the algorithm desired.\n\n  Supported algorithms that can be obtained/overridden in Fulcro (check the source of app/fulcro-app if you suspect this is out\n  of date):\n\n  - `:tx!` - Internal implementation of transaction submission. Default `app/default-tx!`\n  - `:global-eql-transform` - A `(fn [tx] tx')` that is applied to all outgoing requests (when using default `tx!`).\n     Defaults to stripping things like `:ui/*` and form state config joins.\n  - `:remote-error?` - A `(fn [result] boolean)` that defines what a remote error is.\n  - `:global-error-action` - A `(fn [env] ...)` that is run on any remote error (as defined by `remote-error?`).\n  - `:optimized-render!` - The concrete render algorithm for optimized renders (not root refreshes)\n  - `:render!` - The top-level render function. Calls root render or optimized render by default. Renders on the calling thread.\n  - `:schedule-render!` - The call that schedules a render. Defaults to using `js/requestAnimationFrame`.\n  - `:default-result-action!` -  The action used for remote results in all mutations that do not have a `result-action` section.\n  - `:index-root!` - The algorithm that scans the current query from root an indexes all classes by their queries.\n  - `:index-component!` - The algorithm that adds a component to indexes when it mounts.\n  - `:drop-component!` - The algorithm that removes a component from indexes when it unmounts.\n  - `:props-middleware` - Middleware that can modify `props` for all components.\n  - `:render-middleware` - Middlware that wraps all `render` methods of `defsc` components.\n\n  Returns nil if the algorithm is currently undefined.\n  \"\n  [{:com.fulcrologic.fulcro.application/keys [algorithms] :as app} k]\n  (when-let [nm (when (or (string? k) (keyword? k) (symbol? k))\n                  (keyword \"com.fulcrologic.fulcro.algorithm\" (name k)))]\n    (get-in app [:com.fulcrologic.fulcro.application/algorithms nm] nil)))\n"]}