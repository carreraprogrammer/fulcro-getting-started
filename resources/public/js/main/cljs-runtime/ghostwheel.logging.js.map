{"version":3,"sources":["ghostwheel/logging.cljc"],"mappings":"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","names":["ghostwheel.logging/*nesting","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","ghostwheel.logging/*report-output*","ghostwheel.logging/ghostwheel-colors","ghostwheel.logging/ops-with-bindings","ghostwheel.logging/wrap-line","size","text","cljs.pprint.cl_format.cljs$core$IFn$_invoke$arity$variadic","clojure.string.split.cljs$core$IFn$_invoke$arity$2","ghostwheel.logging/wrap","line","ghostwheel.logging/truncate-string","long-string","limit","cljs.core/count","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","ghostwheel.logging/get-styled-label","p__56530","p__56531","map__56532","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","foreground","cljs.core.get.cljs$core$IFn$_invoke$arity$2","background","weight","vec__56533","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq56526","G__56527","cljs.core/first","cljs.core/next","G__56528","G__56529","self__4717__auto__","label","style","output","length","cljs.core/not","G__56537","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","ghostwheel.logging/plain-log","msg","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__56539","cljs.core/*print-newline*","*print-fn*-orig-val__56540","cljs.core/*print-fn*","*print-newline*-temp-val__56541","*print-fn*-temp-val__56542","x__4662__auto__","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","clojure.string/split-lines","p1__56538#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__56544","ghostwheel.logging/log","js/Error","ghostwheel.logging.log.cljs$core$IFn$_invoke$arity$2","styled-msg","G__56554","cljs.core/Keyword","js/console.log","js/console","cljs.core/to-array","G__56562","ghostwheel.logging/DBG","args-arr__4751__auto__","argseq__4752__auto__","seq56561","self__4718__auto__","cljs.core/seq","ghostwheel.logging.log.cljs$core$IFn$_invoke$arity$1","msgs","seq__56567","chunk__56568","count__56569","i__56570","temp__5804__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/last","ghostwheel.logging/log-raw","seq56586","G__56587","format-strings","objs","G__56592","seq__56596","chunk__56597","count__56598","i__56599","obj","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","ghostwheel.logging/error","G__56608","js/console.error","ghostwheel.logging/plain-group","ghostwheel.logging.log.cljs$core$IFn$_invoke$arity$0","p1__56611#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","G__56633","ghostwheel.logging/group*","open?","ghostwheel.logging.group_STAR_.cljs$core$IFn$_invoke$arity$3","styled-label","G__56639","js/console.group","js/console.groupCollapsed","G__56651","ghostwheel.logging/group","ghostwheel.logging.group.cljs$core$IFn$_invoke$arity$2","G__56660","ghostwheel.logging/group-collapsed","plain-group-end","p1__56670#","x__4219__auto__","y__4220__auto__","ghostwheel.logging/group-end","G__56684","js/console.groupEnd","ghostwheel.logging/log-bold","ghostwheel.logging/clog","data","ghostwheel.logging/pr-clog","p__56696","vec__56697","seq56692","G__56693","G__56694"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ghostwheel.logging\n  \"The primary purpose of this is to provide a simple\n  cross-platform console-logging API \u2013 inspired by JavaScript's\n  console.log/group/groupCollapsed/groupEnd \u2013 which makes sure that\n  structured/styled information is displayed to the best of the output\n  destination's abilities, be it a simple REPL or a browser-based JS console.\"\n  (:require [clojure.string :as string]\n            [clojure.pprint :as pprint]))\n\n\n(def *nesting (atom \"\"))\n\n\n(def ^:dynamic *report-output* #?(:clj  :repl\n                                  :cljs :js-console))\n\n\n(def ghostwheel-colors\n  {:purple0 \"#967a93\"\n   :purple1 \"#b87a93\"\n   :purple2 \"#7d9cf8\"\n   :orange0 \"#fe8709\"\n   :orange1 \"#f17d3e\"\n   :green0  \"#82da38\"\n   :green1  \"#54a627\"\n   ;; Solarized colours\n   :base03  \"#002b36\"\n   :black   \"#002b36\"\n   :base02  \"#073642\"\n   :base01  \"#586e75\"\n   :base00  \"#657b83\"\n   :base0   \"#839496\"\n   :base1   \"#93a1a1\"\n   :base2   \"#eee8d5\"\n   :base3   \"#fdf6e3\"\n   :yellow  \"#b58900\"\n   :orange  \"#cb4b16\"\n   :red     \"#dc322f\"\n   :magenta \"#d33682\"\n   :violet  \"#6c71c4\"\n   :blue    \"#268bd2\"\n   :cyan    \"#2aa198\"\n   :green   \"#859900\"})\n\n\n(def ops-with-bindings\n  #{'fn*\n    'fn\n    'ghostwheel.tracer/fn\n    'defn\n    'ghostwheel.tracer/defn\n    'defn-\n    'ghostwheel.tracer/defn-\n    'defmethod\n    'ghostwheel.tracer/defmethod\n    'deftype\n    'ghostwheel.tracer/deftype\n    'defrecord\n    'ghostwheel.tracer/defrecord\n    'reify\n    'ghostwheel.tracer/reify\n    'let\n    'ghostwheel.tracer/let\n    'extend-type\n    'ghostwheel.tracer/extend-type\n    'extend-protocol\n    'ghostwheel.tracer/extend-protocol})\n\n\n;; Borrowed from Rosetta Code\n(defn wrap-line [size text]\n  (pprint/cl-format nil\n                    (str \"~{~<~%~1,\" size \":;~A~> ~}\")\n                    (string/split text #\" \")))\n\n\n(defn wrap [line]\n  (wrap-line 80 line))\n\n\n(defn truncate-string\n  [long-string limit]\n  (if (> (count long-string) limit)\n    (str (subs long-string 0 limit) \"...\")\n    long-string))\n\n\n(defn get-styled-label\n  [label {:keys [::foreground ::background ::weight] :as style} output & [length]]\n  (if-not style\n    [label]\n    (let [label (cond->> (if length\n                           (truncate-string label length)\n                           label)\n                         (= output :js-console) (str \"%c\"))\n          style (when (= output :js-console)\n                  (str \"color: \" (cond foreground foreground\n                                       background \"white\"\n                                       :else (:black ghostwheel-colors)) \";\"\n                       \"background: \" (if background background \"white\") \";\"\n                       \"font-weight: \" (if weight weight \"500\") \";\"\n                       (when background \"text-shadow: 0.5px 0.5px black;\")\n                       (when background \"padding: 2px 6px; border-radius: 2px;\")))]\n      (vec (remove nil? [label style])))))\n\n\n(defn- plain-log [msg]\n  (println (->> (if (string? msg)\n                  msg\n                  (with-out-str (pprint/pprint msg)))\n                string/split-lines\n                (map #(str @*nesting %))\n                (string/join \"\\n\"))))\n\n\n(defn log\n  ([]\n   (log \"\" nil))\n  ([msg]\n   (log msg nil))\n  ([msg style]\n   (let [styled-msg (get-styled-label msg style *report-output*)]\n     (case *report-output*\n       :repl (apply plain-log styled-msg)\n       :js-console #?(:cljs (.apply js/console.log js/console (to-array styled-msg))\n                      :clj  nil)))))\n\n\n(defn DBG\n  ([]\n   (log \"#> MARK\"))\n  ([& msgs]\n   (do\n     (doseq [msg msgs]\n       #?(:clj  (.println System/err (pprint/pprint msg))\n          :cljs (if (nil? msg) (log \"nil\") (log msg))))\n     (last msgs))))\n\n\n(defn log-raw\n  [format-strings & objs]\n  (case *report-output*\n    :repl (doseq [obj objs] (plain-log obj))\n    :js-console #?(:cljs (.apply js/console.log js/console (to-array (concat format-strings objs)))\n                   :clj  nil)))\n\n\n(defn error [msg]\n  (case *report-output*\n    :repl (do (plain-log \"ERROR:\") (plain-log msg))\n    :js-console #?(:cljs (js/console.error msg)\n                   :clj  nil)))\n\n\n(defn- plain-group [label]\n  (do\n    (log)\n    (log (str \"|> \" label))\n    (swap! *nesting #(str % \"| \"))))\n\n\n(defn- group*\n  ([open? label]\n   (group* open? label nil))\n  ([open? label style]\n   (let [styled-label (get-styled-label label style *report-output*)]\n     (case *report-output*\n       :repl (apply plain-group styled-label)\n       :js-console #?(:cljs (.apply (if open?\n                                      js/console.group\n                                      js/console.groupCollapsed)\n                                    js/console\n                                    (to-array styled-label))\n                      :clj  nil)))))\n\n\n(defn group\n  ([label]\n   (group label nil))\n  ([label style]\n   (group* true label style)))\n\n\n(defn group-collapsed\n  ([label]\n   (group label nil))\n  ([label style]\n   (group* false label style)))\n\n\n(let [plain-group-end\n      (fn [] (swap! *nesting #(subs % 0 (max 0 (- (count %) 2)))))]\n  (defn group-end []\n    (case *report-output*\n      :repl (plain-group-end)\n      :js-console #?(:cljs (js/console.groupEnd)\n                     :clj  nil))))\n\n\n(defn log-bold [msg]\n  (log msg {::weight \"bold\"}))\n\n\n(defn clog [data]\n  (do\n    (log data)\n    data))\n\n\n(defn pr-clog\n  \"Pretty console log\"\n  [label data & [style]]\n  (if data\n    (do\n      (group label style)\n      (log data)\n      (group-end))\n    (log label style))\n  data)\n\n\n\n"]}