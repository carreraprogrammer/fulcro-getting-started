{"version":3,"sources":["com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],"mappings":";;;;;AAOA;;;;;;;;;;;;AAAA,AAAAA,AAAMM,AAWHC;AAXH,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAWyCS;AAXzC,AAAAL,AAAAJ,AAAA,AAWeO;AAXf,AAAAH,AAAAJ,AAAA,AAW2BQ;AAX3B,AAYE,AAAAE,AAAUE;AAAVD,AAAgCJ;AAAhC,AAAA,AAAAI,AAAUC;;AAAV,AAAA,AACE,AAAAC,AAA2EP;AAA3EO,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAZ,AAAA,AAAAY,AAAA,AAAA,AAAA,AAAA,AAAAX,AAAAC,AAAAU,AAAAA;AAAA,AAAAT,AAAAS,AAAA,AAAiDG;AAAjD,AAAAZ,AAAAS,AAAA,AAA8DI;AAA9DH,AAAA,AAAAC,AACuFC;AADvFF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAb,AAAA,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAAC,AAAAW,AAAAA;AAAA,AAAAV,AAAAU,AAAA,AACiDI;AADjD,AAAAd,AAAAU,AAAA,AAC8DK;AAD9D,AAAAf,AAAAU,AAAA,AACyEM;AACnEC,AAAiB,AAAIb,AACF,AAAAc,AAAI,AAAA,AAACC,AAAiBjB;AAAtB,AAAA,AAAAgB;AAAAA;;AAAA,AAAAA,AAAmDE;AAAnD,AAAA,AAAAF;AAAAA;;AAAiFG;;;AACjF,AAAAH,AAAI,AAAA,AAACC,AAAiBjB;AAAtB,AAAA,AAAAgB;AAAAA;;AAAkDG;;;AAJ3E,AAAAV,AAKMW,AAAkBT;AAClBU,AAAiB,AAACC,AAAeT,AAAWO;AAC5CG,AAAiB,AAAIF,AACF,AAACG,AAAaH,AAAMD,AAAUA,AAC9BA;AACnBK,AACkB,AAAAC,AAAI,AAACd,AAAAA,AAAAA,AAAaW,AAAAA;AAAlBI,AAA6Bb;AAA7B,AAAA,AAAAY,AAAAC,AAAAD,AAAAC,AAACZ,AAAAA,AAAAA;;AAXzB,AAYE,AAAA,AAACa,AAAMlB,AAAamB,AAAmDJ;;AAC9DA;AAdb,AAAA,AAAArB,AAAUE","names":["p__61947","map__61948","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.rendering.keyframe-render/render!","app","force-root?","hydrate?","options","*blindly-render*-orig-val__61950","*blindly-render*-temp-val__61951","com.fulcrologic.fulcro.components/*blindly-render*","map__61952","map__61953","cljs.core/deref","runtime-atom","state-atom","root-factory","root-class","mount-node","r!","or__4131__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","js/ReactDOM.hydrate","js/ReactDOM.render","state-map","query","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2","data-tree","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","app-root","G__61956","G__61957","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc"],"sourcesContent":["(ns com.fulcrologic.fulcro.rendering.keyframe-render\n  \"The keyframe optimized render.\"\n  (:require\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.components :as comp]))\n\n(defn render!\n  \"Render the UI. The keyframe render runs a full UI query and then asks React to render the root component.\n  The optimizations for this kind of render are purely those provided by `defsc`'s default\n  shouldComponentUpdate, which causes component to act like React PureComponent (though the props compare in cljs\n  is often faster).\n\n  If `:hydrate?` is true it will use the React hydrate functionality (on browsers) to render over\n  server-rendered content in the DOM.\n\n  If `:force-root? true` is included in the options map then not only will this do a keyframe update, it will also\n  force all components to return `false` from `shouldComponentUpdate`.\"\n  [app {:keys [force-root? hydrate?] :as options}]\n  (binding [comp/*blindly-render* force-root?]\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n          r!               (if hydrate?\n                             (or (ah/app-algorithm app :hydrate-root!) #?(:cljs js/ReactDOM.hydrate) #?(:cljs js/ReactDOM.render))\n                             (or (ah/app-algorithm app :render-root!) #?(:cljs js/ReactDOM.render)))\n          state-map        @state-atom\n          query            (comp/get-query root-class state-map)\n          data-tree        (if query\n                             (fdn/db->tree query state-map state-map)\n                             state-map)\n          app-root #?(:clj {}\n                      :cljs (r! (root-factory data-tree) mount-node))]\n      (swap! runtime-atom assoc :com.fulcrologic.fulcro.application/app-root app-root)\n      #?(:cljs app-root))))\n"]}