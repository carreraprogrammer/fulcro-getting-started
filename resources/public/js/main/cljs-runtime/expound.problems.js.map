{"version":3,"sources":["expound/problems.cljc"],"mappings":"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","names":["expound.problems/blank-form","form","cljs.core/map?","cljs.core/zipmap","cljs.core/keys","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","cljs.core/vec","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/set?","cljs.core/list?","cljs.core/seq?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/list","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.core/boolean?","expound.problems/summary-form","show-valid-values?","in","vec__56379","seq__56380","cljs.core/seq","first__56381","cljs.core/first","cljs.core/next","k","rst","or__4131__auto__","displayed-form","cljs.core/empty?","expound.paths/kps?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__56384","G__56385","G__56386","expound.paths/kvps?","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/associative?","G__56389","G__56390","G__56391","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/int?","G__56393","G__56394","G__56395","cljs.core.into.cljs$core$IFn$_invoke$arity$2","G__56398","G__56399","G__56400","G__56402","G__56403","G__56404","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","expound.problems/highlight-line","prefix","replacement","max-width","cljs.core/max","p1__56408#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.string/split-lines","expound.printer.indent.cljs$core$IFn$_invoke$arity$2","cljs.core/str","expound.problems/adjust-in","problem","in1","expound.paths/in-with-kps","in2","paths","expound.paths/paths-to-value","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","in3","e56422","cljs.spec.alpha/unform","cljs.core/last","_e","new-in","G__56429","fexpr__56428","expound.problems/adjust-path","failure","cljs.core/rest","expound.problems/add-spec","spec","expound.problems/fix-via","expound.problems/missing-spec?","_failure","expound.problems/not-in-set?","expound.problems/fspec-exception-failure?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","expound.problems/fspec-ret-failure?","expound.problems/fspec-fn-failure?","expound.problems/check-ret-failure?","expound.problems/check-fn-failure?","expound.problems/missing-key?","pred","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","expound.problems/insufficient-input?","cljs.core/contains?","expound.problems/extra-input?","expound.problems/ptype","expound.problems/escape-replacement","pattern","s","clojure.string/replace","expound.problems/highlighted-value","opts","map__56463","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","map__56464","cljs.core.get.cljs$core$IFn$_invoke$arity$3","vec__56465","seq__56466","first__56467","printed-val","expound.printer/pprint-str","expound.paths/value-in","relevant","regex","cljs.core/re-pattern","*print-namespace-maps*-orig-val__56470","*print-namespace-maps*-temp-val__56471","cljs.core/*print-namespace-maps*","clojure.walk/prewalk-replace","line","_more","cljs.core/re-find","highlighted-line","expound.printer.indent.cljs$core$IFn$_invoke$arity$3","expound.ansi.color.cljs$core$IFn$_invoke$arity$variadic","expound.printer/no-trailing-whitespace","expound.problems/annotate","explain-data","map__56478","problems","value","args","ret","fn","caller","problems'","p1__56476#","p1__56477#","cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","expound.problems/type","expound.problems/value-in"],"sourcesContent":["(ns ^:no-doc expound.problems\n  (:require [expound.paths :as paths]\n            [clojure.spec.alpha :as s]\n            [clojure.walk :as walk]\n            [clojure.string :as string]\n            [expound.printer :as printer]\n            [expound.ansi :as ansi])\n  (:refer-clojure :exclude [type]))\n\n(defn blank-form [form]\n  (cond\n    (map? form)\n    (zipmap (keys form) (repeat ::irrelevant))\n\n    (vector? form)\n    (vec (repeat (count form) ::irrelevant))\n\n    (set? form)\n    form\n\n    (or (list? form)\n        (seq? form))\n    (apply list (repeat (count form) ::irrelevant))\n\n    :else\n    ::irrelevant))\n\n(s/fdef summary-form\n        :args (s/cat :show-valid-values? boolean?\n                     :form any?\n                     :highlighted-path :expound/path))\n(defn summary-form [show-valid-values? form in]\n  (let [[k & rst] in\n        rst (or rst [])\n        displayed-form (if show-valid-values? form (blank-form form))]\n    (cond\n      (empty? in)\n      ::relevant\n\n      (and (map? form) (paths/kps? k))\n      (-> displayed-form\n          (dissoc (:key k))\n          (assoc (summary-form show-valid-values? (:key k) rst)\n                 ::irrelevant))\n\n      (and (map? form) (paths/kvps? k))\n      (recur show-valid-values? (nth (seq form) (:idx k)) rst)\n\n      (associative? form)\n      (assoc displayed-form\n             k\n             (summary-form show-valid-values? (get form k) rst))\n\n      (and (int? k) (seq? form))\n      (apply list (-> displayed-form\n                      vec\n                      (assoc k (summary-form show-valid-values? (nth form k) rst))))\n\n      (and (int? k) (set? form))\n      (into #{} (-> displayed-form\n                    vec\n                    (assoc k (summary-form show-valid-values? (nth (seq form) k) rst))))\n\n      (and (int? k) (list? form))\n      (into '() (-> displayed-form\n                    vec\n                    (assoc k (summary-form show-valid-values? (nth (seq form) k) rst))))\n\n      (and (int? k) (string? form))\n      (string/join (assoc (vec form) k ::relevant))\n\n      :else\n      (throw (ex-info \"Cannot find path segment in form. This can be caused by using conformers to transform values, which is not supported in Expound\"\n                      {:form form\n                       :in in})))))\n\n;; FIXME - this function is not intuitive.\n(defn highlight-line\n  [prefix replacement]\n  (let [max-width (apply max (map #(count (str %)) (string/split-lines replacement)))]\n    (printer/indent (count (str prefix))\n                    (apply str (repeat max-width \"^\")))))\n\n;; can simplify when \n;; https://dev.clojure.org/jira/browse/CLJ-2192 or\n;; https://dev.clojure.org/jira/browse/CLJ-2258 are fixed\n(defn- adjust-in [form problem]\n  ;; Three strategies for finding the value...\n  (let [;; 1. Find the original value\n        in1 (paths/in-with-kps form (:val problem) (:in problem) [])\n\n        ;; 2. If value is unique, just find that, ignoring the 'in' path\n        in2 (let [paths (paths/paths-to-value form (:val problem) [] [])]\n              (if (= 1 (count paths))\n                (first paths)\n                nil))\n\n        ;; 3. Find the unformed value (if there is an unformer)\n        in3 (try\n              (paths/in-with-kps form\n                                 (s/unform (last (:via problem)) (:val problem))\n                                 (:in problem) [])\n              ;; The unform fails if there is no unformer\n              ;; and the unform function could throw any type of\n              ;; exception (it's provided by user)\n              (catch #?(:cljs :default\n                        :clj java.lang.Throwable) _e\n                nil))\n        new-in (cond in1\n                     in1\n\n                     in2\n                     in2\n\n                     in3\n                     in3\n\n                     (or (= '(apply fn) (:pred problem))\n                         (#{:ret} (first (:path problem))))\n                     (:in problem)\n\n                     :else\n                     nil)]\n\n    (assoc problem\n           :expound/in\n           new-in)))\n\n(defn- adjust-path [failure problem]\n  (assoc problem :expound/path\n         (if (= :instrument failure)\n           (vec (rest (:path problem)))\n           (:path problem))))\n\n(defn- add-spec [spec problem]\n  (assoc problem :spec spec))\n\n;; via is slightly different when using s/assert\n(defn fix-via [spec problem]\n  (if (= spec (first (:via problem)))\n    (assoc problem :expound/via (:via problem))\n    (assoc problem :expound/via (into [spec] (:via problem)))))\n\n(defn ^:private missing-spec? [_failure problem]\n  (= \"no method\" (:reason problem)))\n\n(defn ^:private not-in-set? [_failure problem]\n  (set? (:pred problem)))\n\n(defn ^:private fspec-exception-failure? [failure problem]\n  (and (not= :instrument failure)\n       (not= :check-failed failure)\n       (= '(apply fn) (:pred problem))))\n\n(defn ^:private fspec-ret-failure? [failure problem]\n  (and\n   (not= :instrument failure)\n   (not= :check-failed failure)\n   (= :ret (first (:path problem)))))\n\n(defn ^:private fspec-fn-failure? [failure problem]\n  (and\n   (not= :instrument failure)\n   (not= :check-failed failure)\n   (= :fn (first (:path problem)))))\n\n(defn ^:private check-ret-failure? [failure problem]\n  (and\n   (= :check-failed failure)\n   (= :ret (first (:path problem)))))\n\n(defn ^:private check-fn-failure? [failure problem]\n  (and (= :check-failed failure)\n       (= :fn (first (:path problem)))))\n\n(defn ^:private missing-key? [_failure problem]\n  (let [pred (:pred problem)]\n    (and (seq? pred)\n         (< 2 (count pred))\n         (s/valid?\n          :expound.spec/contains-key-pred\n          (nth pred 2)))))\n\n(defn ^:private insufficient-input? [_failure problem]\n  (contains? #{\"Insufficient input\"} (:reason problem)))\n\n(defn ^:private extra-input? [_failure problem]\n  (contains? #{\"Extra input\"} (:reason problem)))\n\n(defn ^:private ptype [failure problem]\n  (cond\n    (:expound.spec.problem/type problem)\n    (:expound.spec.problem/type problem)\n\n    (insufficient-input? failure problem)\n    :expound.problem/insufficient-input\n\n    (extra-input? failure problem)\n    :expound.problem/extra-input\n\n    (not-in-set? failure problem)\n    :expound.problem/not-in-set\n\n    (missing-key? failure problem)\n    :expound.problem/missing-key\n\n    (missing-spec? failure problem)\n    :expound.problem/missing-spec\n\n    (fspec-exception-failure? failure problem)\n    :expound.problem/fspec-exception-failure\n\n    (fspec-ret-failure? failure problem)\n    :expound.problem/fspec-ret-failure\n\n    (fspec-fn-failure? failure problem)\n    :expound.problem/fspec-fn-failure\n\n    (check-ret-failure? failure problem)\n    :expound.problem/check-ret-failure\n\n    (check-fn-failure? failure problem)\n    :expound.problem/check-fn-failure\n\n    :else\n    :expound.problem/unknown))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;; public ;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn escape-replacement [pattern s]\n  #?(:clj (if (string? pattern)\n            s\n            (string/re-quote-replacement s))\n     :cljs (string/replace s #\"\\$\" \"$$$$\")))\n\n(defn highlighted-value\n  \"Given a problem, returns a pretty printed\n   string that highlights the problem value\"\n  [opts problem]\n  (let [{:keys [:expound/form :expound/in]} problem\n        {:keys [show-valid-values?] :or {show-valid-values? false}} opts\n        printed-val (printer/pprint-str (paths/value-in form in))\n        relevant (str \"(\" ::relevant \"|(\" ::kv-relevant \"\\\\s+\" ::kv-relevant \"))\")\n        regex (re-pattern (str \"(.*)\" relevant \".*\"))\n        s (binding [*print-namespace-maps* false] (printer/pprint-str (walk/prewalk-replace {::irrelevant '...} (summary-form show-valid-values? form in))))\n        [line prefix & _more] (re-find regex s)\n        highlighted-line (-> line\n                             (string/replace (re-pattern relevant) (escape-replacement\n                                                                    (re-pattern relevant)\n                                                                    (printer/indent 0 (count prefix) (ansi/color printed-val :bad-value))))\n                             (str \"\\n\" (ansi/color (highlight-line prefix printed-val)\n                                                   :pointer)))]\n    ;;highlighted-line\n    (printer/no-trailing-whitespace (string/replace s line (escape-replacement line highlighted-line)))))\n\n(defn annotate [explain-data]\n  (let [{::s/keys [problems value args ret fn failure spec]} explain-data\n        caller (or (:clojure.spec.test.alpha/caller explain-data) (:orchestra.spec.test/caller explain-data))\n        form (if (not= :instrument failure)\n               value\n               (cond\n                 (contains? explain-data ::s/ret) ret\n                 (contains? explain-data ::s/args) args\n                 (contains? explain-data ::s/fn) fn))\n        problems' (map (comp (partial adjust-in form)\n                             (partial adjust-path failure)\n                             (partial add-spec spec)\n                             (partial fix-via spec)\n                             #(assoc % :expound/form form)\n                             #(assoc % :expound.spec.problem/type (ptype failure %)))\n                       problems)]\n    (-> explain-data\n        (assoc :expound/form form\n               :expound/caller caller\n               :expound/problems problems'))))\n\n(def type ptype)\n\n;; Must keep this function here because\n;; spell-spec uses it\n;; https://github.com/bhauman/spell-spec/blob/48ea2ca544f02b04a73dc42a91aa4876dcc5fc95/src/spell_spec/expound.cljc#L20\n(def value-in paths/value-in)\n"]}