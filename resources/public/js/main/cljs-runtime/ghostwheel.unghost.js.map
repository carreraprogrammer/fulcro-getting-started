{"version":3,"sources":["ghostwheel/unghost.cljc"],"mappings":";;AAEA;;;;AAAA,AAAMA,AAGHC,AAAGC;AAHN,AAIE,AAAMC,AAAc,AAAKC;AAAL,AAAe,AAACC,AAAQ,AAACC,AAAKC,AAAQH;;AACpDI,AAAc;AAAKC;AAAL,AAAW,AAAAC,AAA2BD;AAA3BE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAAOG;AAAPH,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAAYI;AAAZN,AAAqBO;AAArB,AACE,AAACC,AAAKH,AAAKE;;;AAF5C,AAGO,AAAI,AAACf,AAAcD,AACjB,AAAAkB,AAA8B,AAACO,AAAW,AAACC,AAAWrB,AAASL,AAIjE,AAACgC,AAAOC;AAJN,AAAAd,AAAAD,AAAA,AAAA,AAAOK;AAAP,AAAAJ,AAAAD,AAAA,AAAA,AAAkBM;AAAlB,AAAA,AAAAJ,AAAA,AAAAV,AAAA,AAAAW,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AACKvB,AAAKwB,AAAa,AAACjB,AAAYkB;AACpC,AAAAG,AAA4C,AAACE,AAAa,AAACH,AAAWI,AAAM9B;AAA5E,AAAAmB,AAAAQ,AAAA,AAAA,AAAOJ;AAAP,AAAAJ,AAAAQ,AAAA,AAAA,AAAkBH;AAAlB,AAAAL,AAAAQ,AAAA,AAAA,AAA6BC;AAA7B,AAAA,AAAAR,AAAA,AAAAV,AAAA,AAAAW,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AACKvB,AAAKwB,AAAa,AAACQ,AAAIzB,AAAYkB,AAAcI","names":["ghostwheel.unghost/clean-defn","op","forms","single-arity?","fn-forms","cljs.core/boolean","cljs.core/some","cljs.core/vector?","strip-gspec","body","vec__56617","seq__56618","cljs.core/seq","first__56619","cljs.core/first","cljs.core/next","args","_gspec","more","cljs.core/cons","vec__56620","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","head-forms","body-forms","cljs.core/split-with","cljs.core/complement","vec__56627","tail-attr-map","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core/seq?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?"],"sourcesContent":["(ns ghostwheel.unghost)\n\n(defn clean-defn\n  \"This removes the gspec and returns a\n  clean defn for use in production builds.\"\n  [op forms]\n  (let [single-arity? (fn [fn-forms] (boolean (some vector? fn-forms)))\n        strip-gspec   (fn [body] (let [[args _gspec & more] body]\n                                   (cons args more)))]\n    (->> (if (single-arity? forms)\n           (let [[head-forms body-forms] (split-with (complement vector?) forms)]\n             `(~op ~@head-forms ~@(strip-gspec body-forms)))\n           (let [[head-forms body-forms tail-attr-map] (partition-by (complement seq?) forms)]\n             `(~op ~@head-forms ~@(map strip-gspec body-forms) ~@tail-attr-map)))\n         (remove nil?))))\n"]}