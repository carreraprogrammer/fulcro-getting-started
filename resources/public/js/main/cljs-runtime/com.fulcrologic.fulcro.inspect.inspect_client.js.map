{"version":3,"sources":["com/fulcrologic/fulcro/inspect/inspect_client.cljc"],"mappings":"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","names":["goog/define","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.inspect","js/com.fulcrologic.fulcro.inspect.inspect-client","js/com.fulcrologic.fulcro.inspect.inspect-client.started?*","com.fulcrologic.fulcro.inspect.inspect-client/started?*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/com.fulcrologic.fulcro.inspect.inspect-client.tools-app*","com.fulcrologic.fulcro.inspect.inspect-client/tools-app*","js/com.fulcrologic.fulcro.inspect.inspect-client.apps*","com.fulcrologic.fulcro.inspect.inspect-client/apps*","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid-key","js/com.fulcrologic.fulcro.inspect.inspect-client.send-ch","com.fulcrologic.fulcro.inspect.inspect-client/send-ch","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async/dropping-buffer","com.fulcrologic.fulcro.inspect.inspect-client/post-message","type","data","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.inspect.inspect-client/cljs?","env","cljs.core/boolean","var_args","G__53970","com.fulcrologic.fulcro.inspect.inspect-client/isoget","js/Error","obj","k","com.fulcrologic.fulcro.inspect.inspect_client.isoget.cljs$core$IFn$_invoke$arity$3","default","or__4131__auto__","G__53983","G__53985","goog.object/get","G__53987","cljs.core/name","com.fulcrologic.fulcro.inspect.inspect-client/app-state","app","G__53992","cljs.core/deref","com.fulcrologic.fulcro.inspect.inspect-client/runtime-atom","G__53996","com.fulcrologic.fulcro.inspect.inspect-client/state-atom","G__54001","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid","G__54003","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.inspect.inspect-client/remotes","G__54006","com.fulcrologic.fulcro.inspect.inspect-client/app-id","G__54009","com.fulcrologic.fulcro.inspect.inspect-client/fulcro-app-id","com.fulcrologic.fulcro.inspect.inspect-client/get-component-name","component","G__54012","com.fulcrologic.fulcro.inspect.inspect_client.isoget.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.inspect.inspect-client/comp-transact!","tx","options","tx!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","com.fulcrologic.fulcro.inspect.inspect-client/MAX_HISTORY_SIZE","com.fulcrologic.fulcro.inspect.inspect-client/fixed-size-assoc","size","db","key","value","map__54019","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","history","db'","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","cljs.core/count","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/first","p1__54016#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/vec","cljs.core/next","com.fulcrologic.fulcro.inspect.inspect-client/update-state-history","state","p1__54024#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","cljs.core/hash","com.fulcrologic.fulcro.inspect.inspect-client/db-from-history","state-hash","G__54028","com.fulcrologic.fulcro.inspect.inspect-client/db-changed!","old-state","new-state","app-uuid","diff","com.fulcrologic.fulcro.inspect.diff/diff","com.fulcrologic.fulcro.inspect.inspect-client/event-data","event","G__54033","goog.object/getValueByKeys","com.fulcrologic.fulcro.inspect.transit/read","com.fulcrologic.fulcro.inspect.inspect-client/start-send-message-loop","c__51656__auto__","cljs.core.async.impl.dispatch/run","f__51657__auto__","switch__50648__auto__","state_54065","state_val_54066","statearr-54068","cljs.core.async.impl.ioc-helpers/take!","inst_54062","cljs.core.async.impl.ioc-helpers/return-chan","inst_54039","statearr-54071","statearr-54072","statearr-54073","inst_54045","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","inst_54046","inst_54047","inst_54048","inst_54049","js/Date","inst_54050","inst_54051","cljs.core/PersistentHashMap","inst_54052","inst_54053","inst_54054","inst_54055","inst_54056","statearr-54075","statearr-54079","statearr-54081","inst_54060","statearr-54082","statearr-54086","state-machine__50649__auto__","ret-value__50650__auto__","result__50651__auto__","cljs.core/keyword-identical?","e54089","js/Object","ex__50652__auto__","statearr-54090","cljs.core.async.impl.ioc-helpers/process-exception","state__51658__auto__","statearr-54091","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/window","cljs.core/clj->js","com.fulcrologic.fulcro.inspect.transit/write","com.fulcrologic.fulcro.inspect.inspect-client/listen-local-messages","and__4120__auto__","G__54093","com.fulcrologic.fulcro.inspect.inspect-client/handle-devtool-message","G__54100","com.fulcrologic.fulcro.inspect.inspect-client/transact-inspector!","ref","com.fulcrologic.fulcro.inspect.inspect-client/dispose-app","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","com.fulcrologic.fulcro.inspect.inspect-client/set-active-app","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","remote","tx-id","txn","start","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","com.fulcrologic.fulcro.inspect.inspect_client.transact_inspector_BANG_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","response","finished","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","error","p__54140","map__54142","G__54149","cljs.core/Keyword","seq__54153","chunk__54154","count__54155","i__54156","temp__5804__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/vals","remote-names","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","p1__54134#","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/str","map__54195","target-state","temp__5802__auto__","render!","cljs.core/reset!","G__54213","G__54214","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","map__54220","tx-ref","b2__46703__auto__","map__54241","G__54245","historical-state","historical-app","G__54249","G__54250","map__54253","G__54255","G__54256","G__54257","map__54258","query","remote-name","msg-id","transmit!","ast","edn-query-language.core/query->ast","cljs.core/random-uuid","G__54262","G__54263","cljs.core/identity","p__54265","map__54266","body","result","error?","map__54271","log","log-js","warn","js/console.log","js/console.warn","js/console.error","com.fulcrologic.fulcro.inspect.inspect-client/install","_","js/document.documentElement.setAttribute","com.fulcrologic.fulcro.inspect.inspect-client/app-started!","networking","state*","cljs.core/assoc","p1__54280#","cljs.core/keys","p1__54283#","p2__54284#","p3__54281#","p4__54282#","cljs.core/add-watch","p__54285","p__54286","map__54288","map__54289","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","state-before","component-name","G__54299"],"sourcesContent":["(ns com.fulcrologic.fulcro.inspect.inspect-client\n  \"Functions used by Fulcro to talk to Fulcro Inspect.\"\n  #?(:cljs (:require-macros com.fulcrologic.fulcro.inspect.inspect-client))\n  (:require\n    [edn-query-language.core :as eql]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    #?@(:cljs [[goog.object :as gobj]\n               [com.fulcrologic.fulcro.inspect.diff :as diff]\n               [com.fulcrologic.fulcro.inspect.transit :as encode]\n               [cljs.core.async :as async]])\n    [taoensso.encore :as encore]\n    [taoensso.timbre :as log]))\n\n#?(:cljs (goog-define INSPECT false))\n\n(declare handle-devtool-message)\n(defonce started?* (atom false))\n(defonce tools-app* (atom nil))\n(defonce apps* (atom {}))\n(def app-uuid-key :fulcro.inspect.core/app-uuid)\n\n(defonce send-ch #?(:clj nil :cljs (async/chan (async/dropping-buffer 50000))))\n(defn post-message [type data]\n  #?(:cljs (async/put! send-ch [type data])))\n\n(defn cljs?\n  \"Returns true when env is a cljs macro &env\"\n  [env]\n  (boolean (:ns env)))\n\n(defn- isoget\n  \"Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.\"\n  ([obj k] (isoget obj k nil))\n  ([obj k default]\n   #?(:clj  (get obj k default)\n      :cljs (or (gobj/get obj (some-> k (name))) default))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Helpers so we don't have to include other nses\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn app-state [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref))\n(defn runtime-atom [app] (some-> app :com.fulcrologic.fulcro.application/runtime-atom))\n(defn state-atom [app] (some-> app :com.fulcrologic.fulcro.application/state-atom))\n(defn app-uuid [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref (get app-uuid-key)))\n(defn remotes [app] (some-> (runtime-atom app) deref :com.fulcrologic.fulcro.application/remotes))\n(defn app-id [app] (some-> (app-state app) :fulcro.inspect.core/app-id))\n(defn fulcro-app-id [app] (:com.fulcrologic.fulcro.application/id app))\n(defn get-component-name [component] (when component (some-> (isoget component :fulcro$options) :displayName)))\n(defn comp-transact! [app tx options]\n  (let [tx! (ah/app-algorithm app :tx!)]\n    (tx! app tx options)))\n\n\n(def MAX_HISTORY_SIZE 100)\n\n(defn- fixed-size-assoc [size db key value]\n  (let [{:fulcro.inspect.client/keys [history] :as db'}\n        (-> db\n          (assoc key value)\n          (update :fulcro.inspect.client/history (fnil conj []) key))]\n    (if (> (count history) size)\n      (-> db'\n        (dissoc (first history))\n        (update :fulcro.inspect.client/history #(vec (next %))))\n      db')))\n\n(defn- update-state-history\n  \"Record a snapshot of history on the app itself for inspect to reference via events to do things like preview\n   history.\"\n  [app state]\n  (swap! (runtime-atom app) update :fulcro.inspect.client/state-history\n    #(fixed-size-assoc MAX_HISTORY_SIZE % (hash state) state)))\n\n(defn db-from-history [app state-hash]\n  (some-> (runtime-atom app) deref :fulcro.inspect.client/state-history (get state-hash)))\n\n(defn db-changed!\n  \"Notify Inspect that the database changed\"\n  [app old-state new-state]\n  #?(:cljs\n     (let [app-uuid (app-uuid app)]\n       (update-state-history app new-state)\n       (let [diff (diff/diff old-state new-state)]\n         (post-message :fulcro.inspect.client/db-update {app-uuid-key                           app-uuid\n                                                         :fulcro.inspect.client/prev-state-hash (hash old-state)\n                                                         :fulcro.inspect.client/state-hash      (hash new-state)\n                                                         :fulcro.inspect.client/state-delta     diff})))))\n\n(defn event-data [event]\n  #?(:cljs (some-> event (gobj/getValueByKeys \"data\" \"fulcro-inspect-devtool-message\") encode/read)))\n\n(defn start-send-message-loop []\n  #?(:cljs\n     (async/go-loop []\n       (when-let [[type data] (async/<! send-ch)]\n         (.postMessage js/window (clj->js {:fulcro-inspect-remote-message (encode/write {:type type :data data :timestamp (js/Date.)})}) \"*\")\n         (recur)))))\n\n(defn listen-local-messages []\n  #?(:cljs\n     (.addEventListener js/window \"message\"\n       (fn [event]\n         (cond\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-devtool-message\"))\n           (handle-devtool-message (event-data event))\n\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-start-consume\"))\n           (start-send-message-loop)))\n       false)))\n\n(defn transact-inspector!\n  ([tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx tx}))\n  ([ref tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx-ref ref :fulcro.inspect.client/tx tx})))\n\n(defn dispose-app [app-uuid]\n  (swap! apps* dissoc app-uuid)\n  (post-message :fulcro.inspect.client/dispose-app {app-uuid-key app-uuid}))\n\n(defn set-active-app [app-uuid]\n  (post-message :fulcro.inspect.client/set-active-app {app-uuid-key app-uuid}))\n\n#_(defn inspect-app [app]\n    #?(:cljs\n       (let [networking (remotes app)\n             state*     (state-atom app)\n             app-uuid   (random-uuid)]\n\n         (swap! apps* assoc app-uuid app)\n         #_(update-state-history app @state*)\n\n         (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                        :fulcro.inspect.core/app-id          (app-id app)\n                                                        :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                        :fulcro.inspect.client/initial-state @state*\n                                                        :fulcro.inspect.client/state-hash    (hash @state*)})\n\n         (add-watch state* app-uuid #(db-update app app-uuid %3 %4))\n\n         (swap! state* assoc app-uuid-key app-uuid)\n\n         app)))\n\n(defn send-started! [app remote tx-id txn]\n  #?(:cljs\n     (let [start    (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-start ~{:fulcro.inspect.ui.network/remote             remote\n                                                      :fulcro.inspect.ui.network/request-id         tx-id\n                                                      :fulcro.inspect.ui.network/request-started-at start\n                                                      :fulcro.inspect.ui.network/request-edn        txn})]))))\n\n(defn send-finished! [app remote tx-id response]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/response-edn        response})]))))\n\n(defn send-failed! [app tx-id error]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/error               error})]))))\n(defn handle-devtool-message [{:keys [type data]}]\n  #?(:cljs\n     (case type\n       :fulcro.inspect.client/request-page-apps\n       (do\n         (doseq [app (vals @apps*)]\n           (let [state        (app-state app)\n                 remote-names (remotes app)]\n             (post-message :fulcro.inspect.client/init-app {app-uuid-key                         (app-uuid app)\n                                                            :fulcro.inspect.core/app-id          (app-id app)\n                                                            :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) remote-names)\n                                                            :fulcro.inspect.client/initial-state state\n                                                            :fulcro.inspect.client/state-hash    (hash state)}))))\n\n       :fulcro.inspect.client/reset-app-state\n       (let [{:keys                     [target-state]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (let [render! (ah/app-algorithm app :schedule-render!)]\n             (if target-state\n               (let [target-state (assoc target-state app-uuid-key app-uuid)]\n                 (reset! (state-atom app) target-state)))\n             (render! app {:force-root? true}))\n           (log/info \"Reset app on invalid uuid\" app-uuid)))\n\n       :fulcro.inspect.client/transact\n       (let [{:keys                     [tx tx-ref]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (if tx-ref\n             (comp-transact! app tx {:ref tx-ref})\n             (comp-transact! app tx {}))\n           (log/error \"Transact on invalid uuid\" app-uuid)))\n\n       :fulcro.inspect.client/pick-element\n       (log/error \"Pick Element Not implemented for Inspect v3\")\n\n       :fulcro.inspect.client/show-dom-preview\n       (encore/if-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                       app              (some-> @apps* (get app-uuid))\n                       historical-state (db-from-history app (:fulcro.inspect.client/state-hash data))\n                       historical-app   (assoc app :com.fulcrologic.fulcro.application/state-atom (atom historical-state))\n                       render!          (ah/app-algorithm app :render!)]\n         (do\n           (render! historical-app {:force-root? true}))\n         (log/error \"Unable to find app/state for preview.\"))\n\n       :fulcro.inspect.client/hide-dom-preview\n       (encore/when-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                         app (some-> @apps* (get app-uuid))\n                         render! (ah/app-algorithm app :render!)]\n         (render! app {:force-root? true}))\n\n       :fulcro.inspect.client/network-request\n       (let [{:keys                          [query]\n              remote-name                    :fulcro.inspect.client/remote\n              :fulcro.inspect.ui-parser/keys [msg-id]\n              :fulcro.inspect.core/keys      [app-uuid]} data]\n         (encore/when-let [app (get @apps* app-uuid)\n                           remote (get (remotes app) remote-name)\n                           transmit! (-> remote :transmit!)\n                           ast (eql/query->ast query)\n                           tx-id (random-uuid)]\n           (send-started! app remote-name tx-id query)\n           (transmit! remote {:com.fulcrologic.fulcro.algorithms.tx-processing/id             tx-id\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/ast            ast\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/idx            0\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/options        {}\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/update-handler identity\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/result-handler (fn [{:keys [body] :as result}]\n                                                                                                (let [error? (ah/app-algorithm app :remote-error?)]\n                                                                                                  (if (error? result)\n                                                                                                    (send-failed! app remote-name result)\n                                                                                                    (send-finished! app remote-name tx-id body)))\n                                                                                                (post-message :fulcro.inspect.client/message-response\n                                                                                                  {:fulcro.inspect.ui-parser/msg-id       msg-id\n                                                                                                   :fulcro.inspect.ui-parser/msg-response body}))})))\n\n       :fulcro.inspect.client/console-log\n       (let [{:keys [log log-js warn error]} data]\n         (cond\n           log\n           (js/console.log log)\n\n           log-js\n           (js/console.log (clj->js log-js))\n\n           warn\n           (js/console.warn warn)\n\n           error\n           (js/console.error error)))\n\n       :fulcro.inspect.client/check-client-version\n       (post-message :fulcro.inspect.client/client-version {:version \"2.2.5\"})\n\n       (log/error \"Unknown message\" type))))\n\n\n(defn install [_]\n  #?(:cljs\n     (do\n       (js/document.documentElement.setAttribute \"__fulcro-inspect-remote-installed__\" true)\n\n       (when-not @started?*\n         (log/info \"Installing Fulcro 3.x Inspect\" {})\n\n         (reset! started?* true)\n\n         (listen-local-messages)))))\n\n\n(defn app-started!\n  \"Register the application with Inspect, if it is available.\"\n  [app]\n  #?(:cljs\n     (let [networking (remotes app)\n           state*     (state-atom app)\n           app-uuid   (fulcro-app-id app)]\n       (swap! apps* assoc app-uuid app)\n       (update-state-history app @state*)\n       (swap! state* assoc app-uuid-key app-uuid)\n       (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                      :fulcro.inspect.core/app-id          (app-id app)\n                                                      :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                      :fulcro.inspect.client/initial-state @state*\n                                                      :fulcro.inspect.client/state-hash    (hash @state*)})\n       (add-watch state* app-uuid #(db-changed! app %3 %4)))))\n\n(defn optimistic-action-finished!\n  \"Notify inspect that a transaction finished.\n\n   app - The app\n   env - The mutation env that completed.\"\n  [app\n   {:keys [component ref state com.fulcrologic.fulcro.algorithms.tx-processing/options]}\n   {:keys [tx-id tx state-before]}]\n  #?(:cljs\n     (let [component-name (get-component-name component)\n           tx             (cond-> {:fulcro.inspect.ui.transactions/tx-id                    tx-id\n                                   :fulcro.history/client-time                              (js/Date.)\n                                   :fulcro.history/tx                                       tx\n                                   :fulcro.history/db-before-hash                           (hash state-before)\n                                   :fulcro.history/db-after-hash                            (hash @state)\n                                   :fulcro.history/network-sends                            []\n                                   :com.fulcrologic.fulcro.algorithms.tx-processing/options options}\n                            component-name (assoc :component component-name)\n                            ref (assoc :ident-ref ref))\n           app-uuid       (app-uuid app)]\n       (post-message :fulcro.inspect.client/new-client-transaction {app-uuid-key              app-uuid\n                                                                    :fulcro.inspect.client/tx tx}))))\n\n(defmacro ido\n  \"Wrap a block of code that will only run if Inspect is enabled.  Code in these blocks will also be removed via\n  DCE in Closure.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [& body]\n  (when (cljs? &env)\n    `(when (or ~'goog.DEBUG INSPECT)\n       (try\n         ~@body\n         (catch :default ~'e)))))\n\n(defmacro ilet\n  \"Like `clojure.core/let`, but elides the block if Inspect isn't enabled.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [bindings & body]\n  (when (cljs? &env)\n    `(ido\n       (let ~bindings\n         ~@body))))\n"]}