{"version":3,"sources":["cljs/spec/test/alpha.cljs"],"mappings":"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","names":["cljs.spec.test.alpha/distinct-by","f","coll","step","xs","seen","cljs.core/LazySeq","fexpr__55511","p__55512","vec__55513","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","x","temp__5804__auto__","s","cljs.core/seq","v","cljs.core/contains?","cljs.core/rest","cljs.core/cons","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.spec.test.alpha/->sym","fexpr__55516","cljs.core/deref","cljs.spec.alpha/->sym","cljs.spec.test.alpha/*instrument-enabled*","cljs.spec.test.alpha/get-host-port","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/*target*","js/window","cljs.spec.test.alpha/get-ua-product","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","cljs.spec.test.alpha/get-env","cljs.spec.test.alpha/fn-spec?","m","or__4131__auto__","cljs.spec.test.alpha/explain-data*","spec","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$3","cljs.spec.alpha/explain-data","cljs.spec.test.alpha/find-caller","st","frame","and__4120__auto__","clojure.string/blank?","cljs.core/re-find","p1__55518#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core/not","search-spec-fn","cljs.core/first","cljs.spec.test.alpha/spec-checking-fn","fn-spec","p1__55520#","fexpr__55521","cljs.spec.alpha/maybe-spec","args-spec","conform!","role","data","args","conformed","cljs.spec.alpha/conform","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","caller","G__55526","G__55527","G__55528","G__55529","cljs.stacktrace/parse-stacktrace","js/Error","ed","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.spec.alpha/explain-data*","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","pure-variadic?","cljs.core/meta","apply'","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","conform!*","ret","orig__55297__auto__","js/cljs.spec.test.alpha","*instrument-enabled*-orig-val__55534","*instrument-enabled*-temp-val__55535","temp__5808__auto__","ac__55460__auto__","*instrument-enabled*-orig-val__55540","*instrument-enabled*-temp-val__55541","arg0","*instrument-enabled*-orig-val__55549","*instrument-enabled*-temp-val__55550","arg1","*instrument-enabled*-orig-val__55562","*instrument-enabled*-temp-val__55563","arg2","*instrument-enabled*-orig-val__55567","*instrument-enabled*-temp-val__55568","arg3","*instrument-enabled*-orig-val__55618","*instrument-enabled*-temp-val__55619","arg4","*instrument-enabled*-orig-val__55631","*instrument-enabled*-temp-val__55632","arg5","*instrument-enabled*-orig-val__55638","*instrument-enabled*-temp-val__55639","arg6","*instrument-enabled*-orig-val__55652","*instrument-enabled*-temp-val__55653","arg7","*instrument-enabled*-orig-val__55656","*instrument-enabled*-temp-val__55657","arg8","*instrument-enabled*-orig-val__55658","*instrument-enabled*-temp-val__55659","arg9","*instrument-enabled*-orig-val__55661","*instrument-enabled*-temp-val__55662","arg10","*instrument-enabled*-orig-val__55666","*instrument-enabled*-temp-val__55667","arg11","*instrument-enabled*-orig-val__55675","*instrument-enabled*-temp-val__55676","arg12","*instrument-enabled*-orig-val__55698","*instrument-enabled*-temp-val__55699","arg13","*instrument-enabled*-orig-val__55712","*instrument-enabled*-temp-val__55713","arg14","*instrument-enabled*-orig-val__55714","*instrument-enabled*-temp-val__55715","arg15","*instrument-enabled*-orig-val__55724","*instrument-enabled*-temp-val__55725","arg16","*instrument-enabled*-orig-val__55736","*instrument-enabled*-temp-val__55737","arg17","*instrument-enabled*-orig-val__55745","*instrument-enabled*-temp-val__55746","arg18","*instrument-enabled*-orig-val__55752","*instrument-enabled*-temp-val__55753","arg19","*instrument-enabled*-orig-val__55763","*instrument-enabled*-temp-val__55764","variadic","cljs.core/list*","*instrument-enabled*-orig-val__55769","*instrument-enabled*-temp-val__55770","cljs.spec.test.alpha/no-fspec","js/cljs","js/cljs.spec","js/cljs.spec.test","js/cljs.spec.test.alpha.instrumented-vars","cljs.spec.test.alpha/instrumented-vars","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p__55789","map__55792","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.spec.test.alpha/instrument-choose-fn","sym","over","stub","replace","cljs.core/some","cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$2","cljs.spec.gen.alpha/generate","cljs.core.get.cljs$core$IFn$_invoke$arity$3","p__55811","map__55812","cljs.spec.test.alpha/instrument-choose-spec","overrides","cljs.spec.test.alpha/instrument-1*","opts","map__55840","cljs.spec.alpha/get-spec","raw","wrapped","current","to-wrap","ospec","ofn","checked","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.spec.test.alpha/unstrument-1*","map__55868","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","cljs.spec.test.alpha/fn-spec-name?","cljs.core/Symbol","cljs.spec.test.alpha/collectionize","cljs.core/List","var_args","G__55889","cljs.spec.test.alpha/instrumentable-syms","cljs.spec.test.alpha.instrumentable_syms.cljs$core$IFn$_invoke$arity$1","cljs.core/every?","cljs.core/ident?","cljs.core/keys","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/registry","cljs.spec.test.alpha/explain-check","cljs.spec.test.alpha/check-call","specs","cargs","cret","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","p__55961","map__55962","cljs.spec.test.alpha/quick-check","gen","map__55967","num-tests","g","e55970","t","prop","p1__55959#","cljs.spec.gen.alpha.for_all_STAR_.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.spec.gen.alpha/quick-check","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/identity","cljs.spec.test.alpha/make-check-result","check-sym","test-check-ret","tc-ret-key","result","shrunk","cljs.spec.test.alpha/validate-check-opts","cljs.spec.test.alpha/failure-type","cljs.core/ex-data","cljs.spec.test.alpha/unwrap-failure","cljs.spec.test.alpha/result-type","failure","cljs.spec.test.alpha/abbrev-result","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.spec.alpha/describe","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__56042","cljs.spec.test.alpha/summarize-results","check-results","cljs.spec.test.alpha.summarize_results.cljs$core$IFn$_invoke$arity$2","summary-result","summary","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","cljs.core/inc","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.spec.test.alpha\n  (:require-macros [cljs.spec.test.alpha :as m :refer [with-instrument-disabled setup-static-dispatches]])\n  (:require\n    [goog.object :as gobj]\n    [goog.userAgent.product :as product]\n    [clojure.string :as string]\n    [cljs.stacktrace :as st]\n    [cljs.pprint :as pp]\n    [cljs.spec.alpha :as s]\n    [cljs.spec.gen.alpha :as gen]))\n\n(defn distinct-by\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [v (f x)]\n                         (if (contains? seen v)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen v)))))))\n                    xs seen)))]\n     (step coll #{}))))\n\n(defn ->sym\n  [x]\n  (@#'s/->sym x))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; instrument ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def ^:private ^:dynamic *instrument-enabled*\n  \"if false, instrumented fns call straight through\"\n  true)\n\n(defn get-host-port []\n  (if (not= \"browser\" *target*)\n    {}\n    {:host (.. js/window -location -host)\n     :port (.. js/window -location -port)}))\n\n(defn get-ua-product []\n  (if (not= \"browser\" *target*)\n    (keyword *target*)\n    (cond\n      product/SAFARI :safari\n      product/CHROME :chrome\n      product/FIREFOX :firefox\n      product/IE :ie)))\n\n(defn get-env []\n  {:ua-product (get-ua-product)})\n\n(defn- fn-spec?\n  \"Fn-spec must include at least :args or :ret specs.\"\n  [m]\n  (or (:args m) (:ret m)))\n\n;; wrap spec/explain-data until specs always return nil for ok data\n(defn- explain-data*\n  [spec v]\n  (when-not (s/valid? spec v nil)\n    (s/explain-data spec v)))\n\n(defn- find-caller [st]\n  (letfn [(search-spec-fn [frame]\n            (when frame\n              (let [s (:function frame)]\n                (and (string? s) (not (string/blank? s))\n                     (re-find #\"cljs\\.spec\\.test\\.spec_checking_fn\" s)))))]\n    (->> st\n         (drop-while #(not (search-spec-fn %)))\n         (drop-while search-spec-fn)\n         first)))\n\n;; TODO: check ::caller result in other browsers - David\n\n(defn- spec-checking-fn\n  [v f fn-spec]\n  (let [fn-spec (@#'s/maybe-spec fn-spec)\n        args-spec (:args fn-spec)\n        conform! (fn [v role spec data args]\n                   (let [conformed (s/conform spec data)]\n                     (if (= ::s/invalid conformed)\n                       (let [caller (find-caller\n                                      (st/parse-stacktrace\n                                        (get-host-port)\n                                        (.-stack (js/Error.))\n                                        (get-env) nil))\n                             ed (merge (assoc (s/explain-data* spec [] [] [] data)\n                                         ::s/fn (->sym v)\n                                         ::s/args args\n                                         ::s/failure :instrument)\n                                  (when caller\n                                    {::caller caller}))]\n                         (throw (ex-info\n                                  (str \"Call to \" v \" did not conform to spec.\" )\n                                  ed)))\n                       conformed)))\n        pure-variadic? (and (-> (meta v) :top-fn :variadic?)\n                            (zero? (-> (meta v) :top-fn :max-fixed-arity)))\n        apply' (fn [f args]\n                 (if (and (nil? args)\n                          pure-variadic?)\n                   (.cljs$core$IFn$_invoke$arity$variadic f)\n                   (apply f args)))\n        conform!* #(conform! v :args args-spec % %)\n        ret (if args-spec\n              (fn [& args]\n                (if *instrument-enabled*\n                  (with-instrument-disabled\n                    (conform!* args)\n                    (binding [*instrument-enabled* true]\n                      (apply' f args)))\n                  (apply' f args)))\n              f)]\n    (when (and (not pure-variadic?) args-spec)\n      (setup-static-dispatches f ret conform!* 20)\n      (when-some [variadic (.-cljs$core$IFn$_invoke$arity$variadic f)]\n        (set! (.-cljs$core$IFn$_invoke$arity$variadic ret)\n          (fn [& args]\n            (if *instrument-enabled*\n              (with-instrument-disabled\n                (conform!* (apply list* args))\n                (binding [*instrument-enabled* true]\n                  (apply' variadic args)))\n              (apply' variadic args))))))\n    ret))\n\n(defn- no-fspec\n  [v spec]\n  (ex-info (str \"Fn at \" v \" is not spec'ed.\")\n    {:var v :spec spec ::s/failure :no-fspec}))\n\n(defonce ^:private instrumented-vars (atom {}))\n\n(defn- instrument-choose-fn\n  \"Helper for instrument.\"\n  [f spec sym {over :gen :keys [stub replace]}]\n  (if (some #{sym} stub)\n    (-> spec (s/gen over) gen/generate)\n    (get replace sym f)))\n\n(defn- instrument-choose-spec\n  \"Helper for instrument\"\n  [spec sym {overrides :spec}]\n  (get overrides sym spec))\n\n(defn- instrument-1*\n  [s v opts]\n  (let [spec (s/get-spec v)\n        {:keys [raw wrapped]} (get @instrumented-vars v)\n        current @v\n        to-wrap (if (= wrapped current) raw current)\n        ospec (or (instrument-choose-spec spec s opts)\n                (throw (no-fspec v spec)))\n        ofn (instrument-choose-fn to-wrap ospec s opts)\n        checked (spec-checking-fn v ofn ospec)]\n    (swap! instrumented-vars assoc v {:raw to-wrap :wrapped checked})\n    checked))\n\n(defn- unstrument-1*\n  [s v]\n  (when v\n    (when-let [{:keys [raw wrapped]} (get @instrumented-vars v)]\n      (swap! instrumented-vars dissoc v)\n      (let [current @v]\n        (when (= wrapped current)\n          raw)))))\n\n(defn- fn-spec-name?\n  [s]\n  (symbol? s))\n\n(defn- collectionize\n  [x]\n  (if (symbol? x)\n    (list x)\n    x))\n\n(defn instrumentable-syms\n  \"Given an opts map as per instrument, returns the set of syms\nthat can be instrumented.\"\n  ([] (instrumentable-syms nil))\n  ([opts]\n   (assert (every? ident? (keys (:gen opts))) \"instrument :gen expects ident keys\")\n   (reduce into #{} [(filter fn-spec-name? (keys (s/registry)))\n                     (keys (:spec opts))\n                     (:stub opts)\n                     (keys (:replace opts))])))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; testing  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- explain-check\n  [args spec v role]\n  (ex-info\n    \"Specification-based check failed\"\n    (when-not (s/valid? spec v nil)\n      (assoc (s/explain-data* spec [role] [] [] v)\n        ::args args\n        ::val v\n        ::s/failure :check-failed))))\n\n(defn- check-call\n  \"Returns true if call passes specs, otherwise *returns* an exception\nwith explain-data + ::s/failure.\"\n  [f specs args]\n  (let [cargs (when (:args specs) (s/conform (:args specs) args))]\n    (if (= cargs ::s/invalid)\n      (explain-check args (:args specs) args :args)\n      (let [ret (apply f args)\n            cret (when (:ret specs) (s/conform (:ret specs) ret))]\n        (if (= cret ::s/invalid)\n          (explain-check args (:ret specs) ret :ret)\n          (if (and (:args specs) (:ret specs) (:fn specs))\n            (if (s/valid? (:fn specs) {:args cargs :ret cret})\n              true\n              (explain-check args (:fn specs) {:args cargs :ret cret} :fn))\n            true))))))\n\n(defn- quick-check\n  [f specs {gen :gen opts :clojure.spec.test.check/opts}]\n  (let [{:keys [num-tests] :or {num-tests 1000}} opts\n        g (try (s/gen (:args specs) gen) (catch js/Error t t))]\n    (if (instance? js/Error g)\n      {:result g}\n      (let [prop (gen/for-all* [g] #(check-call f specs %))]\n        (apply gen/quick-check num-tests prop (mapcat identity opts))))))\n\n(defn- make-check-result\n  \"Builds spec result map.\"\n  [check-sym spec test-check-ret tc-ret-key]\n  (merge {:spec spec\n          tc-ret-key test-check-ret}\n    (when check-sym\n      {:sym check-sym})\n    (when-let [result (-> test-check-ret :result)]\n      (when-not (true? result) {:failure result}))\n    (when-let [shrunk (-> test-check-ret :shrunk)]\n      {:failure (:result shrunk)})))\n\n(defn validate-check-opts\n  [opts]\n  (assert (every? ident? (keys (:gen opts))) \"check :gen expects ident keys\"))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; check reporting  ;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- failure-type\n  [x]\n  (::s/failure (ex-data x)))\n\n(defn- unwrap-failure\n  [x]\n  (if (failure-type x)\n    (ex-data x)\n    x))\n\n(defn- result-type\n  \"Returns the type of the check result. This can be any of the\n::s/failure keywords documented in 'check', or:\n\n  :check-passed   all checked fn returns conformed\n  :check-threw    checked fn threw an exception\"\n  [ret]\n  (let [failure (:failure ret)]\n    (cond\n      (nil? failure) :check-passed\n      (failure-type failure) (failure-type failure)\n      :default :check-threw)))\n\n(defn abbrev-result\n  \"Given a check result, returns an abbreviated version\nsuitable for summary use.\"\n  [x]\n  (if (:failure x)\n    (-> (dissoc x :clojure.spec.test.check/ret)\n      (update :spec s/describe)\n      (update :failure unwrap-failure))\n    (dissoc x :spec :clojure.spec.test.check/opts)))\n\n(defn summarize-results\n  \"Given a collection of check-results, e.g. from 'check', pretty\nprints the summary-result (default abbrev-result) of each.\n\nReturns a map with :total, the total number of results, plus a\nkey with a count for each different :type of result.\"\n  ([check-results] (summarize-results check-results abbrev-result))\n  ([check-results summary-result]\n   (reduce\n     (fn [summary result]\n       (pp/pprint (summary-result result))\n       (-> summary\n         (update :total inc)\n         (update (result-type result) (fnil inc 0))))\n     {:total 0}\n     check-results)))\n\n(comment\n  (require\n    '[cljs.pprint :as pp]\n    '[cljs.spec :as s]\n    '[cljs.spec.gen :as gen]\n    '[cljs.test :as ctest])\n\n  (require :reload '[cljs.spec.test :as test])\n\n  ;; discover speced vars for your own test runner\n  (s/speced-vars)\n\n  ;; check a single var\n  (test/check-var #'-)\n  (test/check-var #'+)\n  (test/check-var #'clojure.spec.broken-specs/throwing-fn)\n\n  ;; old style example tests\n  (ctest/run-all-tests)\n\n  (s/speced-vars 'clojure.spec.correct-specs)\n  ;; new style spec tests return same kind of map\n  (test/check-var #'subs)\n  (cljs.spec.test/run-tests 'clojure.core)\n  (test/run-all-tests)\n\n  ;; example evaluation\n  (defn ranged-rand\n    \"Returns random int in range start <= rand < end\"\n    [start end]\n    (+ start (long (rand (- end start)))))\n\n  (s/fdef ranged-rand\n    :args (s/and (s/cat :start int? :end int?)\n                 #(< (:start %) (:end %)))\n    :ret  int?\n    :fn   (s/and #(>= (:ret %) (-> % :args :start))\n                 #(< (:ret %) (-> % :args :end))))\n\n  (instrumentable-syms)\n\n  (m/instrument-1 `ranged-rand {})\n  (m/unstrument-1 `ranged-rand)\n\n  (m/instrument)\n  (m/instrument `ranged-rand)\n  (m/instrument `[ranged-rand])\n\n  (m/unstrument)\n  (m/unstrument `ranged-rand)\n  (m/unstrument `[ranged-rand])\n\n  (ranged-rand 8 5)\n  (defn foo\n    ([a])\n    ([a b]\n     (ranged-rand 8 5)))\n  (foo 1 2)\n  (m/unstrument-1 `ranged-rand)\n\n  (m/check-1 `ranged-rand nil nil {})\n\n  (m/check-fn inc\n    (s/fspec\n      :args (s/cat :x int?)\n      :ret  int?))\n\n  (m/checkable-syms)\n\n  (m/check `ranged-rand)\n  )\n\n\n\n\n\n"]}